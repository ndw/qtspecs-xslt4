<?xml version="1.0" encoding="UTF-8"?><g:grammar xmlns:g="http://www.w3.org/2001/03/XPath/grammar">
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  <g:language id="xslt40-patterns" display-name="XSLT 4.0 Patterns" if="xslt40-patterns"/>
  
  
  
  
  

  
  
  
  
  
  
  
  <g:start name="Pattern40" state="DEFAULT" if="xslt40-patterns"/>

  

  

  

  

  

  

  

  

  

  

  
  
  
  
  
  
  <g:production name="Pattern40" if="xslt40-patterns">
    <g:choice name="Pattern40Choices">
      <g:ref name="PredicatePattern"/>
      <g:ref name="TypePattern"/>
      <g:ref name="NodePattern"/>
    </g:choice> 
  </g:production>
  
  <g:production name="PredicatePattern" if="xslt30-patterns xslt40-patterns">
    <g:string>.</g:string>
    <g:ref name="PredicateList"/>
  </g:production>
  
  <g:production name="TypePattern" if="xslt40-patterns">
    <g:choice name="TypePatternChoices">
      <g:ref name="WrappedItemTest" lookahead="2"/>
      <g:ref name="AnyItemTest" lookahead="2"/>
      <g:ref name="FunctionTest" lookahead="2" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
      
      
      
      
      
      
    </g:choice>
    <g:ref name="PredicateList"/>
  </g:production>
  
  <g:production name="WrappedItemTest" if="xslt40-patterns">
      <g:string>type</g:string>
      <g:string>(</g:string>
      <g:ref name="ItemType"/>
      <g:string>)</g:string>   
  </g:production>
  
  <g:production name="NodePattern" if="xslt40-patterns">
    <g:ref name="UnionExprP"/>
  </g:production>
  
  <g:production name="UnionExprP" if="xslt30-patterns xslt40-patterns">
    <g:ref name="IntersectExceptExprP"/>
    <g:zeroOrMore name="UnionExprPTail">
      <g:choice name="UnionExprPOperator">
        <g:string>union</g:string>
        <g:string>|</g:string>
      </g:choice>
      <g:ref name="IntersectExceptExprP"/>
    </g:zeroOrMore>
  </g:production>
  
  <g:production name="IntersectExceptExprP" if="xslt30-patterns xslt40-patterns">
    <g:ref name="PathExprP"/>
    <g:zeroOrMore name="IntersectExceptExprPTail">
      <g:choice name="IntersectExceptExprPOperator">
        <g:string>intersect</g:string>
        <g:string>except</g:string>
      </g:choice>
      <g:ref name="PathExprP"/>
    </g:zeroOrMore>
  </g:production>
  
  <g:production name="PathExprP" if="xslt30-patterns xslt40-patterns" xgc-id="leading-lone-slash">
    <g:choice break="true" name="PathExprPChoices">
      <g:ref name="RootedPath" lookahead="2"/>
      <g:sequence>
        <g:ref name="Slash"/>
        <g:optional name="OptionalRelativePathExprP" lookahead="1">
          <g:ref name="RelativePathExprP"/>
        </g:optional>
      </g:sequence>
      <g:sequence>
        <g:ref name="SlashSlash"/>
        <g:ref name="RelativePathExprP"/>
      </g:sequence>
      <g:ref name="RelativePathExprP"/>
    </g:choice>
  </g:production>
  
  <g:production name="RootedPath" if="xslt30-patterns xslt40-patterns">
    <g:choice name="VarOrFunctionCall">
      <g:ref name="VarRef"/>
      <g:ref name="FunctionCallP"/>
    </g:choice>
    <g:ref name="PredicateList"/>
    <g:optional>
      <g:choice name="RootedPathOperator">
        <g:ref name="Slash"/>
        <g:ref name="SlashSlash"/>
      </g:choice>
      <g:ref name="RelativePathExprP"/>
    </g:optional>
  </g:production>
  
  <g:production name="FunctionCallP" if="xslt30-patterns xslt40-patterns">
    <g:ref name="OuterFunctionName"/>
    <g:ref name="ArgumentListP"/>
  </g:production>
  
  <g:production name="OuterFunctionName" if="xslt30-patterns xslt40-patterns">
    <g:choice name="FNameChoice">
      <g:string process-value="yes">doc</g:string>
      <g:string process-value="yes">id</g:string>
      <g:string process-value="yes">element-with-id</g:string>
      <g:string process-value="yes">key</g:string>
      <g:ref name="URIQualifiedName"/>
    </g:choice>
  </g:production>

  <g:production name="ArgumentListP" if="xslt30-patterns xslt40-patterns">
    <g:string>(</g:string>
    <g:optional name="ArgListP">
      <g:ref name="ArgumentP"/>
      <g:zeroOrMore name="ArgListTailP">
        <g:string>,</g:string>
        <g:ref name="ArgumentP"/>
      </g:zeroOrMore>
    </g:optional>
    <g:string>)</g:string>
  </g:production>
  
  <g:production name="ArgumentP" if="xslt30-patterns xslt40-patterns">
    <g:choice name="ArgumentPChoice">
      <g:ref name="VarRef"/>
      <g:ref name="Literal"/>
    </g:choice>
  </g:production>
     
  <g:production name="RelativePathExprP" if="xslt30-patterns xslt40-patterns" node-type="void">
    <g:ref name="StepExprP"/>
    <g:zeroOrMore name="RelativePathExprPTail">
      <g:choice name="RelativePathExprPOperator">
        <g:ref name="Slash" node-type="void"/>
        <g:ref name="SlashSlash"/>
      </g:choice>
      <g:ref name="StepExprP"/>
    </g:zeroOrMore>
  </g:production>
  
  <g:production name="StepExprP" if="xslt30-patterns xslt40-patterns">
    <g:choice name="StepExprPChoice">
      <g:ref name="PostfixExprP"/>
      <g:ref name="AxisStepP"/>
    </g:choice>
  </g:production>
  
  <g:production name="PostfixExprP" if="xslt30-patterns xslt40-patterns">
    <g:ref name="ParenthesizedExprP"/>
    <g:ref name="PredicateList"/>
  </g:production>
  
  <g:production name="ParenthesizedExprP" if="xslt30-patterns xslt40-patterns">
    <g:string>(</g:string>
    <g:ref name="UnionExprP"/>
    <g:string>)</g:string>
  </g:production>
  
  <g:production name="AxisStepP" if="xslt30-patterns xslt40-patterns">
    <g:ref name="ForwardStepP"/>
    <g:ref name="PredicateList"/>
  </g:production>
  
  <g:production name="ForwardStepP" if="xslt30-patterns xslt40-patterns" node-type="void">
    <g:choice name="ForwardAxisOrAbbrevP">
      <g:sequence lookahead="2">
        <g:ref name="ForwardAxisP"/>
        <g:ref name="NodeTest"/>
      </g:sequence>
      <g:ref name="AbbrevForwardStep"/>
    </g:choice>
  </g:production>
  
  <g:production name="ForwardAxisP" if="xslt30-patterns xslt40-patterns">
    <g:choice break="true" name="ForwardAxisPNames">
      <g:sequence>
        <g:string process-value="yes">child</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">descendant</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">attribute</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">self</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">descendant-or-self</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">namespace</g:string>
        <g:string>::</g:string>
      </g:sequence>
    </g:choice>
  </g:production>
  
  

  

  
  

  

  
  


  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  
  
  

  

  

  

  

  

  

  

  

  
  
  <g:production name="FunctionSignature">
    <g:string>(</g:string>
    <g:optional name="OptionalParamList">
      <g:ref name="ParamList"/>
    </g:optional>
    <g:string>)</g:string>
    <g:optional name="optionFuncType">
      <g:ref name="TypeDeclaration"/>
    </g:optional>
  </g:production>

  <g:production name="ParamList" if="xcore xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
        <g:ref name="Param"/>
        <g:zeroOrMore name="ParamListTail">
          <g:string>,</g:string>
          <g:ref name="Param"/>
        </g:zeroOrMore>
  </g:production>

  <g:production name="Param" if="xcore xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string>$</g:string>
    <g:ref name="EQName" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
    <g:optional name="OptionalTypeDeclarationForParam">
      <g:ref name="TypeDeclaration"/>
    </g:optional>
  </g:production>

  <g:production name="FunctionBody" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:ref name="EnclosedExpr" not-if="scripting"/>
    
  </g:production>

  <g:production name="EnclosedExpr" if="xcore xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:ref name="Lbrace"/>
    <g:ref name="Expr" not-if="xpath31 xpath40 xquery31 xquery40"/>
    
    <g:ref name="Rbrace"/>
  </g:production>
  
  

  

  

  

  <g:production name="Expr" not-if="xpath1">
    <g:ref name="ExprSingle" not-if="scripting"/>
    <g:zeroOrMore not-if="scripting">
      <g:string>,</g:string>
      <g:ref name="ExprSingle"/>
    </g:zeroOrMore>
    
  </g:production>

  

  

  <g:production name="ExprSingle" node-type="void">
    <g:choice break="true" name="ExprSingleChoice">
      
      <g:ref name="ForExpr" if="xpath20 xpath30 xpath31 xpath40 xslt2-patterns xslt30-patterns xslt40-patterns" lookahead="2"/>
      <g:ref name="LetExpr" if="xpath30 xpath31 xpath40 xslt30-patterns xslt40-patterns" lookahead="2"/>
      
      
      <g:ref name="QuantifiedExpr" not-if="xpath1" lookahead="2"/>
      
      
      <g:ref name="IfExpr" not-if="xpath1" lookahead="2"/>
      
      
      
      
      
      
      
      
      
      
      
      
      <g:ref name="OrExpr" not-if="xpath40 xquery40"/>
      
    </g:choice>
  </g:production>
  
  
  
  
  
  
  

  

  <g:production name="ForExpr" if="xpath20 xpath30 xpath31 xpath40 xslt2-patterns xslt30-patterns xslt40-patterns">
    <g:ref name="SimpleForClause"/>
    <g:string>return</g:string>
    <g:ref name="ExprSingle"/>
  </g:production>

  <g:production name="SimpleForClause" if="xpath20 xpath30 xpath31 xpath40 xslt2-patterns xslt30-patterns xslt40-patterns" node-type="void">
    <g:string>for</g:string>
    
    <g:ref name="SimpleForBinding" if="xpath30 xpath31 xpath40 xslt30-patterns xslt40-patterns"/>
    <g:zeroOrMore name="SimpleForClauseTail">
      <g:string>,</g:string>
      
      <g:ref name="SimpleForBinding" if="xpath30 xpath31 xpath40 xslt30-patterns xslt40-patterns"/>
    </g:zeroOrMore>
  </g:production>

  <g:production name="SimpleForBinding" if="xpath30 xpath31 xpath40 xslt30-patterns xslt40-patterns">
    
    <g:string>$</g:string>
    <g:ref name="VarName"/>
    
    <g:string>in</g:string>
    <g:ref name="ExprSingle"/>
  </g:production>

  <g:production name="LetExpr" if="xpath30 xpath31 xpath40 xslt30-patterns xslt40-patterns">
    <g:ref name="SimpleLetClause"/>
    <g:string>return</g:string>
    <g:ref name="ExprSingle"/>
  </g:production>

  <g:production name="SimpleLetClause" if="xpath30 xpath31 xpath40 xslt30-patterns xslt40-patterns">
    <g:string>let</g:string>
    <g:ref name="SimpleLetBinding"/>
    <g:zeroOrMore>
      <g:string>,</g:string>
      <g:ref name="SimpleLetBinding"/>
    </g:zeroOrMore>
  </g:production>

  <g:production name="SimpleLetBinding" if="xpath30 xpath31 xpath40 xslt30-patterns xslt40-patterns">
    <g:string>$</g:string>
    <g:ref name="VarName"/>
    <g:string>:=</g:string>
    <g:ref name="ExprSingle"/>
  </g:production>

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  


  

  

  

  

  

  

  <g:production name="QuantifiedExpr" not-if="xpath1">
    <g:choice name="SomeOrEvery">
      <g:string process-value="yes">some</g:string>
      <g:string process-value="yes">every</g:string>
    </g:choice>
    <g:string>$</g:string>
    <g:ref name="VarName"/>
    
    <g:string>in</g:string>
    <g:ref name="ExprSingle"/>
    <g:zeroOrMore name="QuantifiedVarDeclListTail">
      <g:string>,</g:string>
      <g:string>$</g:string>
      <g:ref name="VarName"/>
      
      <g:string>in</g:string>
      <g:ref name="ExprSingle"/>
    </g:zeroOrMore>
    <g:string>satisfies</g:string>
    <g:ref name="ExprSingle"/>
  </g:production>

  

  

  

  

  

  

  <g:production name="IfExpr" not-if="xpath1">
    <g:string>if</g:string>
    <g:string>(</g:string>
    <g:ref name="Expr"/>
    <g:string>)</g:string>
    <g:string>then</g:string>
    <g:ref name="ExprSingle"/>
    <g:string>else</g:string>
    <g:ref name="ExprSingle"/>
  </g:production>

  



  

  

  

  

  

  

  

  

  <g:exprProduction name="OperatorExpr" node-type="void">
    <g:level>
      <g:binary name="OrExpr" condition="&gt; 1">
        <g:string>or</g:string>
      </g:binary>
    </g:level>
    <g:level>
      <g:binary name="AndExpr" condition="&gt; 1">
        <g:string>and</g:string>
      </g:binary>
    </g:level>
    
    
    <g:level>
      <g:binary name="ComparisonExpr" prefix-seq-type="?" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns" condition="&gt; 1">
        <g:choice break="true" name="ValueOrGeneralOrNodeComp">
          <g:ref name="ValueComp"/>
          <g:ref name="GeneralComp"/>
          <g:ref name="NodeComp"/>
        </g:choice>
      </g:binary>
    </g:level>
    <g:level>
      
    </g:level>
    <g:level if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
      <g:binary name="StringConcatExpr" condition="&gt; 1">
        <g:string>||</g:string>
      </g:binary>
    </g:level>
    <g:level>
      <g:binary name="ByExpr">
        <g:string>by</g:string>
      </g:binary>
    </g:level>
    <g:level>
      <g:postfix name="RangeExpr" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns" prefix-seq-type="?" condition="&gt; 1">
        <g:sequence name="RangeExprOps">
          <g:string>to</g:string>
          <g:ref name="AdditiveExpr"/>
        </g:sequence>
      </g:postfix>
    </g:level>
    <g:level>
      <g:binary name="AdditiveExpr" not-if="xcore" condition="&gt; 1">
        <g:choice name="AdditiveOps">
          <g:ref name="Plus"/>
          <g:ref name="Minus"/>
        </g:choice>
      </g:binary>
    </g:level>
    <g:level>
      <g:binary name="MultiplicativeExpr" not-if="xcore" condition="&gt; 1">
        <g:choice name="MultiplicativeOps">
          <g:string>*</g:string>
          <g:string>div</g:string>
          <g:string not-if="xpath1">idiv</g:string>
          <g:string>mod</g:string>
        </g:choice>
      </g:binary>
    </g:level>
    <g:level>
      <g:binary name="OtherwiseExpr" if="xpath40 xquery40 xslt40-patterns" condition="&gt; 1">
        <g:string>otherwise</g:string>
      </g:binary>
    </g:level>
    <g:level>
      <g:binary name="UnionExpr" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns" condition="&gt; 1">
        <g:choice name="UnionOps">
          
          <g:string>|</g:string>
        </g:choice>
      </g:binary>
    </g:level>
    <g:level>
      <g:binary name="IntersectExceptExpr" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns" condition="&gt; 1">
        <g:choice name="IntersectOps">
          <g:string>intersect</g:string>
          <g:string>except</g:string>
        </g:choice>
      </g:binary>
    </g:level>
    <g:level>
      <g:postfix name="InstanceofExpr" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns" prefix-seq-type="?" condition="&gt; 1">
        <g:sequence name="InstanceOfExprOps">
          <g:string>instance</g:string>
          <g:string>of</g:string>
          <g:ref name="SequenceType"/>
        </g:sequence>
      </g:postfix>
    </g:level>
    <g:level>
      <g:postfix name="TreatExpr" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns" prefix-seq-type="?" condition="&gt; 1">
        <g:sequence name="TreatExprOps">
          <g:string>treat</g:string>
          <g:string>as</g:string>
          <g:ref name="SequenceType"/>
        </g:sequence>
      </g:postfix>
    </g:level>
    <g:level>
      <g:postfix name="CastableExpr" not-if="xpath1" prefix-seq-type="?" condition="&gt; 1">
        <g:sequence name="CastableExprOps">
          <g:string>castable</g:string>
          <g:string>as</g:string>
          <g:ref name="SingleType"/>
        </g:sequence>
      </g:postfix>
    </g:level>
    <g:level>
      <g:postfix name="CastExpr" not-if="xpath1" prefix-seq-type="?" condition="&gt; 1">
        <g:sequence name="CastExprOps">
          <g:string>cast</g:string>
          <g:string>as</g:string>
          <g:ref name="SingleType"/>
        </g:sequence>
      </g:postfix>
    </g:level>
    <g:level>
      
    </g:level>
    <g:level>
      
    </g:level>
 
    <g:level node-type="UnaryExpr" level-user-action="boolean keepUnary=false;">
      <g:prefix name="UnaryExpr" not-if="xcore" condition="keepUnary" prefix-seq-type="*">
        <g:choice name="UnaryExprOps">
          <g:ref name="Minus" token-user-action="keepUnary=true;"/>
          <g:ref name="Plus" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns" token-user-action="keepUnary=true;"/>
        </g:choice>
      </g:prefix>
    </g:level>
    
    <g:level>
      <g:primary name="ValueExpr">
        <g:choice name="ValueExprChoices">
          
          
          
          
          
          <g:ref name="SimpleMapExpr" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
        </g:choice>
      </g:primary>
    </g:level>
  </g:exprProduction>
  
  
  
  

  <g:production name="GeneralComp" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns" is-binary="yes" node-type="void">
    <g:choice break="false" name="GeneralCompOps">
      <g:string>=</g:string>
      <g:string>!=</g:string>
      
      <g:ref name="LeftAngleBracket" token-user-action="/* Careful! */ token_source.SwitchTo(DEFAULT); token_source.stateStack.pop(); "/>
      <g:string>&lt;=</g:string>
      <g:string>&gt;</g:string>
      <g:string>&gt;=</g:string>
    </g:choice>
  </g:production>

  <g:production name="ValueComp" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns" is-binary="yes" node-type="void">
    <g:choice break="false" name="ValueCompOps">
      <g:string>eq</g:string>
      <g:string>ne</g:string>
      <g:string>lt</g:string>
      <g:string>le</g:string>
      <g:string>gt</g:string>
      <g:string>ge</g:string>
    </g:choice>
  </g:production>

  <g:production name="NodeComp" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns" is-binary="yes" node-type="void">
    <g:choice break="false" name="NodeCompOps">
      <g:string>is</g:string>
      <g:string>&lt;&lt;</g:string>
      <g:string>&gt;&gt;</g:string>
    </g:choice>
  </g:production>

  

  

  

  

  

  <g:production name="SimpleMapExpr" condition="&gt; 1" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:ref name="PathExpr"/>
    <g:zeroOrMore>
      <g:string>!</g:string>
      <g:ref name="PathExpr"/>
    </g:zeroOrMore>
  </g:production>

  

  

  <g:production name="PathExpr" xgc-id="leading-lone-slash" not-if="xcore">
    <g:choice break="true" name="PathExprChoices">
      <g:sequence>
        <g:ref name="Slash"/>
        
        <g:optional name="OptionalRootExprTail" lookahead="1">
          <g:ref name="RelativePathExpr"/>
        </g:optional>
      </g:sequence>
      <g:sequence>
        <g:ref name="SlashSlash"/>
        <g:ref name="RelativePathExpr"/>
      </g:sequence>
      <g:ref name="RelativePathExpr"/>
    </g:choice>
  </g:production>

  <g:production name="RelativePathExpr" not-if="xcore" node-type="void">
    <g:ref name="StepExpr"/>
    <g:zeroOrMore name="RelativePathExprTail">
      <g:choice name="RelativePathExprStepSep">
        <g:ref name="Slash"/>
        <g:ref name="SlashSlash"/>
      </g:choice>
      <g:ref name="StepExpr"/>
    </g:zeroOrMore>
  </g:production>

  <g:production name="StepExpr" node-type="void">
    <g:choice name="AxisOrFilterStep">
      
      
      <g:ref name="PostfixExpr" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns" lookahead="3"/>
      
      <g:ref name="AxisStep"/>
      
      
    </g:choice>
  </g:production>

  <g:production name="AxisStep">
    <g:choice name="ForwardOrReverseStep">
      <g:ref name="ReverseStep" lookahead="2"/>
      <g:ref name="ForwardStep"/>
    </g:choice>
    <g:ref name="PredicateList" not-if="xcore"/>
  </g:production>

  <g:production name="ForwardStep" node-type="void">
    <g:choice name="ForwardAxisOrAbbrev">
      <g:sequence lookahead="2">
        <g:ref name="ForwardAxis"/>
        <g:ref name="NodeTest"/>
      </g:sequence>
      <g:ref name="AbbrevForwardStep" not-if="xcore"/>
    </g:choice>
  </g:production>

  <g:production name="ForwardAxis">
    <g:choice break="true" name="ForwardAxisNames">
      <g:sequence>
        <g:string process-value="yes">child</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">descendant</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">attribute</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">self</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">descendant-or-self</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence not-if="xcore">
        <g:string process-value="yes">following-sibling</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence not-if="xcore">
        <g:string process-value="yes">following</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence if="xcore xpath1 xpath20 xpath30 xpath31 xpath40 xslt2-patterns xslt30-patterns xslt40-patterns">
        <g:string process-value="yes">namespace</g:string>
        <g:string>::</g:string>
      </g:sequence>
    </g:choice>
  </g:production>

  <g:production name="AbbrevForwardStep" not-if="xcore">
    <g:optional name="OptionalAtSugar">
      <g:string process-value="yes">@</g:string>
    </g:optional>
    <g:ref name="NodeTest"/>
  </g:production>

  <g:production name="ReverseStep" node-type="void">
    <g:choice name="ReverseAxisOrAbbrev">
      <g:sequence>
        <g:ref name="ReverseAxis"/>
        <g:ref name="NodeTest"/>
      </g:sequence>
      <g:ref name="AbbrevReverseStep" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns"/>
    </g:choice>
  </g:production>

  <g:production name="ReverseAxis">
    <g:choice break="true" name="ReverseAxisNames">
      <g:sequence>
        <g:string process-value="yes">parent</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">ancestor</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence not-if="xcore">
        <g:string process-value="yes">preceding-sibling</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence not-if="xcore">
        <g:string process-value="yes">preceding</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">ancestor-or-self</g:string>
        <g:string>::</g:string>
      </g:sequence>
    </g:choice>
  </g:production>

  <g:production name="AbbrevReverseStep" not-if="xcore">
    <g:string>..</g:string>
  </g:production>

  <g:production name="NodeTest">
    <g:choice name="KindOrNameTest">
      <g:ref name="KindTest" lookahead="2"/>
      <g:ref name="NameTest"/>
    </g:choice>
  </g:production>

  <g:production name="NameTest">
    <g:choice name="QNameOrWildcard">
      <g:ref name="EQName" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
      <g:ref name="Wildcard"/>
    </g:choice>
  </g:production>

  <g:production name="Wildcard" whitespace-spec="explicit">
    <g:choice break="true" name="WildcardChoice">
      <g:string process-value="yes">*</g:string>
      <g:ref name="NCNameColonStar" needs-exposition-parens="yes"/>
      <g:ref name="StarColonNCName" not-if="xpath1" needs-exposition-parens="yes"/>
      <g:ref name="URIQualifiedStar" needs-exposition-parens="yes" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
    </g:choice>
  </g:production>

  <g:production name="FilterExpr" if="xpath1 xpath20 xquery10 xslt2-patterns xslt30-patterns xslt40-patterns">
    <g:ref name="PrimaryExpr"/>
    <g:ref name="PredicateList"/>
  </g:production>

  <g:production name="PostfixExpr" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:ref name="PrimaryExpr"/>
    <g:zeroOrMore>
      <g:choice>
        <g:ref name="Predicate"/>
        <g:ref name="ArgumentList"/>
        
      </g:choice>
    </g:zeroOrMore>
  </g:production>

  <g:production name="ArgumentList" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string>(</g:string>
    
    <g:optional if="xpath40 xquery40 xslt40-patterns">
      <g:choice>
        <g:sequence>
          <g:ref name="PositionalArguments"/>
          <g:optional>
            <g:string>,</g:string>
            <g:ref name="KeywordArguments"/>
          </g:optional>
        </g:sequence>
        <g:ref name="KeywordArguments"/>
      </g:choice>      
    </g:optional>
    <g:string>)</g:string>
  </g:production>
  
  <g:production name="PositionalArguments" if="xpath40 xquery40 xslt40-patterns">
    <g:optional>
      <g:ref name="Argument"/>
      <g:zeroOrMore>
        <g:string>,</g:string>
        <g:ref name="Argument"/>
      </g:zeroOrMore>
    </g:optional>
  </g:production>
  
  <g:production name="KeywordArguments" if="xpath40 xquery40 xslt40-patterns">
      <g:ref name="KeywordArgument"/>
      <g:zeroOrMore>
        <g:string>,</g:string>
        <g:ref name="KeywordArgument"/>
      </g:zeroOrMore>   
  </g:production>
  
  <g:production name="KeywordArgument" if="xpath40 xquery40 xslt40-patterns">
    <g:ref name="NCName"/>
    <g:string>:=</g:string>
    <g:ref name="ExprSingle"/> 
  </g:production>

  <g:production name="PredicateList" not-if="xcore" condition="&gt; 0">
    <g:zeroOrMore name="PredicatesListX">
      <g:ref name="Predicate"/>
    </g:zeroOrMore>
  </g:production>

  <g:production name="Predicate" not-if="xcore">
    <g:string>[</g:string>
    <g:ref name="Expr" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns"/>
    
    <g:string>]</g:string>
  </g:production>

  

  

  

  

  

  <g:production name="PrimaryExpr" node-type="void">
    <g:choice name="PrimaryExprChoices" break="true">
      <g:ref name="Literal"/>
      <g:ref name="VarRef"/>
      <g:ref name="ParenthesizedExpr"/>
      <g:ref name="ContextItemExpr" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns"/>
      
      <g:ref name="FunctionCall" lookahead="2"/>
      
      
      
      
      <g:ref name="FunctionItemExpr" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
      
      
      
      
    </g:choice>
  </g:production>

  <g:production name="Literal" node-type="void">
    <g:choice name="NumericOrStringLit">
      <g:ref name="NumericLiteral"/>
      <g:ref name="StringLiteral"/>
    </g:choice>
  </g:production>

  <g:production name="NumericLiteral" node-type="void">
    <g:choice name="NumericLitChoice">
      <g:ref name="IntegerLiteral"/>
      <g:ref name="DecimalLiteral"/>
      <g:ref name="DoubleLiteral" not-if="xpath1"/>
    </g:choice>
  </g:production>

  <g:production name="VarRef" node-type="void">
    <g:string>$</g:string>
    <g:ref name="VarName"/>
  </g:production>

  <g:production name="VarName">
    <g:ref name="EQName" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
  </g:production>

  <g:production name="ParenthesizedExpr">
    <g:string>(</g:string>
    <g:optional name="OptionalExpr" not-if="xpath1">
      <g:ref name="Expr"/>
    </g:optional>
    
    <g:string>)</g:string>
  </g:production>

  <g:production name="ContextItemExpr" not-if="xcore">
    <g:string process-value="yes">.</g:string>
  </g:production>
  
  

  

  

  <g:production name="FunctionCall" comment-id="parens" xgc-id="reserved-function-names">
    <g:ref name="FunctionEQName" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
    <g:choice>
      
      <g:ref name="ArgumentList" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
    </g:choice>
  </g:production>

  <g:production name="Argument" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:choice>
      <g:ref name="ExprSingle" if="xpath30 xquery30 xslt30-patterns xslt40-patterns"/>
      
      <g:ref name="ArgumentPlaceholder"/>
    </g:choice>
  </g:production>

  <g:production name="ArgumentPlaceholder" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string process-value="yes">?</g:string>
  </g:production>

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  <g:production name="FunctionItemExpr" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:choice lookahead="2">
      <g:ref name="NamedFunctionRef"/>
      <g:ref name="InlineFunctionExpr"/>
      
    </g:choice>
  </g:production>

  <g:production name="NamedFunctionRef" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns" xgc-id="reserved-function-names">
    <g:ref name="FunctionEQName" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
    <g:string>#</g:string>
    <g:ref name="IntegerLiteral"/>
  </g:production>

  <g:production name="InlineFunctionExpr" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    
    <g:choice>
      <g:sequence>
        <g:string>function</g:string>
        <g:ref name="FunctionSignature"/>
      </g:sequence>
      <g:sequence if="xpath40 xquery40 xslt40-patterns">
        <g:string>-&gt;</g:string>
        <g:optional>
          <g:ref name="FunctionSignature"/>
        </g:optional>
      </g:sequence>
    </g:choice>
    <g:ref name="FunctionBody"/>
  </g:production>
  
 
 
    
  
  
 
  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  <g:production name="SingleType" not-if="xpath1">
    
    <g:ref name="SimpleTypeName" if="xpath30 xpath31 xquery30 xquery31 xslt30-patterns xslt40-patterns"/>
    
    <g:optional name="OptionalOccurrenceIndicator">
      <g:string process-value="yes">?</g:string>
    </g:optional>
  </g:production>

  <g:production name="TypeDeclaration" if="xcore xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string>as</g:string>
    <g:ref name="SequenceType"/>
  </g:production>

  <g:production name="SequenceType" not-if="xpath1">
    <g:choice break="true" name="ItemTypeOrEmpty">
      <g:sequence lookahead="2">
        <g:string process-value="yes">empty-sequence</g:string>
        <g:string>(</g:string>
        <g:string>)</g:string>
      </g:sequence>
      <g:sequence>
        <g:ref name="ItemType"/>
        <g:optional name="OptionalOccurrenceIndicatorForSequenceType" lookahead="1">
          <g:ref name="OccurrenceIndicator"/>
        </g:optional>
      </g:sequence>
    </g:choice>
  </g:production>

  <g:production name="OccurrenceIndicator" xgc-id="occurrence-indicators" not-if="xpath1">
    <g:choice name="OccurrenceIndicatorOps">
      <g:string process-value="yes">?</g:string>
      <g:string process-value="yes">*</g:string>
      <g:ref node-type="void" name="Plus"/>
    </g:choice>
  </g:production>

  <g:production name="ItemType" not-if="xpath1">
    <g:choice break="false" name="ItemTypeChoice">
      <g:ref name="AnyItemTest" lookahead="2"/>
      <g:ref name="TypeName" if="xpath40 xquery40 xslt40-patterns"/>
      <g:ref name="KindTest" lookahead="2"/>
      <g:ref name="FunctionTest" lookahead="2" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
      
      
      
      
      
      
      
      <g:ref name="ParenthesizedItemType" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
    </g:choice>
  </g:production>
  
  <g:production name="AnyItemTest" not-if="xpath1">
      <g:string process-value="yes">item</g:string>
      <g:string>(</g:string>
      <g:string>)</g:string>   
  </g:production>

  

  <g:production name="AtomicOrUnionType" if="xpath30 xpath31 xquery30 xquery31 xslt30-patterns xslt40-patterns">
    <g:ref name="EQName" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
  </g:production>

  <g:production name="KindTest" node-type="void">
    <g:choice break="true" name="KindTestChoice">
      <g:ref name="DocumentTest" not-if="xpath1"/>
      <g:ref name="ElementTest" not-if="xpath1"/>
      <g:ref name="AttributeTest" not-if="xpath1"/>
      <g:ref name="SchemaElementTest" not-if="xpath1"/>
      <g:ref name="SchemaAttributeTest" not-if="xpath1"/>
      <g:ref name="PITest"/>
      <g:ref name="CommentTest"/>
      <g:ref name="TextTest"/>
      <g:ref name="NamespaceNodeTest" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
      <g:ref name="AnyKindTest"/>
    </g:choice>
  </g:production>

  <g:production name="AnyKindTest">
    <g:string>node</g:string>
    <g:string>(</g:string>
    <g:string>)</g:string>
  </g:production>

  <g:production name="DocumentTest" not-if="xpath1">
    <g:string>document-node</g:string>
    <g:string>(</g:string>
    <g:optional name="OptionalDocumentTestBody">
      <g:choice name="DocumentTestBodyChoice">
        <g:ref name="ElementTest"/>
        <g:ref name="SchemaElementTest"/>
      </g:choice>
    </g:optional>
    <g:string>)</g:string>
  </g:production>

  <g:production name="TextTest">
    <g:string>text</g:string>
    <g:string>(</g:string>
    <g:string>)</g:string>
  </g:production>

  <g:production name="CommentTest">
    <g:string>comment</g:string>
    <g:string>(</g:string>
    <g:string>)</g:string>
  </g:production>

  <g:production name="NamespaceNodeTest" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string>namespace-node</g:string>
    <g:string>(</g:string>
    <g:string>)</g:string>
  </g:production>

  <g:production name="PITest">
    <g:string>processing-instruction</g:string>
    <g:string>(</g:string>
    <g:optional name="OptionalPITestBody">
      <g:choice name="NCNameForPIOrStringLit">
        <g:ref name="NCName" not-if="xpath1"/>
        <g:ref name="StringLiteral"/>
      </g:choice>
    </g:optional>
    <g:string>)</g:string>
  </g:production>

  <g:production name="AttributeTest" not-if="xpath1">
    <g:string>attribute</g:string>
    <g:string>(</g:string>
    <g:optional name="OptionalAttributeTestBody">
      <g:ref name="AttribNameOrWildcard" not-if="xpath40 xquery40"/>
      
      <g:optional name="AttributeTestBodyOptionalParam">
        <g:string>,</g:string>
        <g:ref name="TypeName"/>
      </g:optional>
    </g:optional>
    <g:string>)</g:string>
  </g:production>

  <g:production name="AttribNameOrWildcard" not-if="xpath1 xpath40 xquery40">
    <g:choice name="AttrNameOrWildcardChoice">
      <g:ref name="AttributeName"/>
      <g:string process-value="yes">*</g:string>
    </g:choice>
  </g:production>

  <g:production name="SchemaAttributeTest" not-if="xpath1">
    <g:string>schema-attribute</g:string>
    <g:string>(</g:string>
    <g:ref name="AttributeDeclaration"/>
    <g:string>)</g:string>
  </g:production>

  <g:production name="AttributeDeclaration" not-if="xpath1">
    <g:ref name="AttributeName"/>
  </g:production>

  <g:production name="ElementTest" not-if="xpath1">
    <g:string>element</g:string>
    <g:string>(</g:string>
    <g:optional name="OptionalElementTestBody">
      <g:ref name="ElementNameOrWildcard" not-if="xpath40 xquery40"/>
      
      <g:optional name="ElementTestBodyOptionalParam">
        <g:string>,</g:string>
        <g:ref name="TypeName"/>
        <g:optional name="Nillable">
          <g:string process-value="yes">?</g:string>
        </g:optional>
      </g:optional>
    </g:optional>
    <g:string>)</g:string>
  </g:production>

  <g:production name="ElementNameOrWildcard" not-if="xpath1 xpath40 xquery40">
    <g:choice name="ElemNameOrWildcardChoice">
      <g:ref name="ElementName"/>
      <g:string process-value="yes">*</g:string>
    </g:choice>
  </g:production>

  <g:production name="SchemaElementTest" not-if="xpath1">
    <g:string>schema-element</g:string>
    <g:string>(</g:string>
    <g:ref name="ElementDeclaration"/>
    <g:string>)</g:string>
  </g:production>

  <g:production name="ElementDeclaration" not-if="xpath1">
    <g:ref name="ElementName"/>
  </g:production>

  <g:production name="AttributeName" not-if="xpath1">
    <g:ref name="EQName" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
  </g:production>

  <g:production name="ElementName" not-if="xpath1">
    <g:ref name="EQName" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
  </g:production>

  <g:production name="SimpleTypeName" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:ref name="TypeName" not-if="xpath40 xquery40"/>
    
  </g:production>

  <g:production name="TypeName" not-if="xpath1">
    <g:ref name="EQName" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
  </g:production>

  <g:production name="FunctionTest" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    
    <g:choice break="true" lookahead="4">
      <g:ref name="AnyFunctionTest"/>
      <g:ref name="TypedFunctionTest"/>
    </g:choice>
  </g:production>

  <g:production name="AnyFunctionTest" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string>function</g:string>
    <g:string>(</g:string>
    <g:string>*</g:string>
    <g:string>)</g:string>
  </g:production>

  <g:production name="TypedFunctionTest" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string>function</g:string>
    <g:string>(</g:string>
    <g:optional>
      <g:ref name="SequenceType"/>
      <g:zeroOrMore>
        <g:string>,</g:string>
        <g:ref name="SequenceType"/>
      </g:zeroOrMore>
    </g:optional>
    <g:string>)</g:string>
    <g:string>as</g:string>
    <g:ref name="SequenceType"/>
  </g:production>

  

  

  
  
  <g:production name="RecordTest" if="xpath40 xquery40 xslt40-patterns">
    <g:string>record</g:string>
    <g:string>(</g:string>
    <g:ref name="FieldDeclaration"/>
    <g:zeroOrMore>
      <g:string>,</g:string>
      <g:ref name="FieldDeclaration"/>
    </g:zeroOrMore>
    <g:optional>
      <g:ref name="ExtensibleFlag"/>
    </g:optional>
    <g:string>)</g:string>
  </g:production>
  
  
  
  
  
  
  
  
  
  

  

  

  
  
  

  <g:production name="ParenthesizedItemType" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string>(</g:string>
    <g:ref name="ItemType"/>
    <g:string>)</g:string>
  </g:production>

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  
  

  

  <g:production name="EQName" node-type="void" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:choice>
      <g:ref name="QName"/>
      <g:ref name="URIQualifiedName"/>
    </g:choice>
  </g:production>

  <g:production name="FunctionEQName" exposition-name="EQName" show="no" node-type="void" whitespace-spec="explicit" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:choice>
      <g:ref name="FunctionQName"/>
      <g:ref name="URIQualifiedName"/>
    </g:choice>
  </g:production>

  <g:production name="NCName" show="no">
    
    
    <g:ref name="QName"/>
  </g:production>

  <g:production name="QName" show="no">
    <g:choice name="QNameChoiceList">
      <g:ref name="FunctionQName"/>
      
      
      <g:string process-value="yes" not-if="xpath1">attribute</g:string>
      <g:string process-value="yes">comment</g:string>
      <g:string process-value="yes" not-if="xpath1">document-node</g:string>
      <g:string process-value="yes" not-if="xpath1">element</g:string>
      <g:string process-value="yes" not-if="xpath1">empty-sequence</g:string>
      <g:string process-value="yes" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">function</g:string>
      <g:string process-value="yes" not-if="xpath1">if</g:string>
      <g:string process-value="yes" not-if="xpath1">item</g:string>
      
      <g:string process-value="yes" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">namespace-node</g:string>
      <g:string process-value="yes">node</g:string>
      <g:string process-value="yes">processing-instruction</g:string>
      <g:string process-value="yes" not-if="xpath1">schema-attribute</g:string>
      <g:string process-value="yes" not-if="xpath1">schema-element</g:string>
      <g:string process-value="yes" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">switch</g:string>
      <g:string process-value="yes">text</g:string>
      <g:string process-value="yes" if="xcore xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">typeswitch</g:string>
      
    </g:choice>
  </g:production>

  <g:production name="FunctionQName" exposition-name="QName" show="no">
    <g:choice name="FunctionQNameChoiceList">
      <g:ref name="QNameToken" show="no"/>
      
      
      
      
      
      
      
      
      
      
      <g:string process-value="yes">ancestor</g:string>
      <g:string process-value="yes">ancestor-or-self</g:string>
      <g:string process-value="yes">and</g:string>
      
      <g:string process-value="yes" if="update10 update30 xcore xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">as</g:string>
      
      
      
      
      
      
      
      
      <g:string process-value="yes" not-if="xpath1">cast</g:string>
      <g:string process-value="yes" not-if="xpath1">castable</g:string>
      
      <g:string process-value="yes">child</g:string>
      
      
      
      
      
      
      
      
      
      
      
      
      
      <g:string process-value="yes">descendant</g:string>
      <g:string process-value="yes">descendant-or-self</g:string>
      
      
      
      
      <g:string process-value="yes" not-if="xcore">div</g:string>
      <g:string process-value="yes" if="xslt30-patterns xslt40-patterns">doc</g:string>
      
      <g:string process-value="yes" if="xslt30-patterns xslt40-patterns">element-with-id</g:string>
      <g:string process-value="yes" not-if="xpath1">else</g:string>
      
      
      
      
      <g:string process-value="yes" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">eq</g:string>
      <g:string process-value="yes" not-if="xpath1">every</g:string>
      
      <g:string process-value="yes" if="fulltext xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">except</g:string>
      
      
      
      <g:string process-value="yes" not-if="xcore">following</g:string>
      <g:string process-value="yes" not-if="xcore">following-sibling</g:string>
      <g:string process-value="yes" not-if="xpath1">for</g:string>
      
      
      
      
      
      
      <g:string process-value="yes" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">ge</g:string>
      
      
      <g:string process-value="yes" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">gt</g:string>
      <g:string process-value="yes" if="xslt2-patterns xslt30-patterns xslt40-patterns">id</g:string>
      <g:string process-value="yes" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">idiv</g:string>
      
      <g:string process-value="yes" if="fulltext xcore xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">in</g:string>
      
      
      
      
      <g:string process-value="yes" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">instance</g:string>
      <g:string process-value="yes" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">intersect</g:string>
      
      
      <g:string process-value="yes" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">is</g:string>
      <g:string process-value="yes" if="xslt2-patterns xslt30-patterns xslt40-patterns">key</g:string>
      
      
      
      <g:string process-value="yes" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">le</g:string>
      <g:string process-value="yes" if="xcore xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">let</g:string>
      
      
      <g:string process-value="yes" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">lt</g:string>
      
      <g:string process-value="yes" not-if="xcore">mod</g:string>
      
      
      
      <g:string process-value="yes">namespace</g:string>
      <g:string process-value="yes" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">ne</g:string>
      
      
      
      
      
      
      
      <g:string process-value="yes" if="update10 update30 xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">of</g:string>
      
      
      <g:string process-value="yes">or</g:string>
      
      
      
      
      
      <g:string process-value="yes">parent</g:string>
      
      
      
      
      <g:string process-value="yes" not-if="xcore">preceding</g:string>
      <g:string process-value="yes" not-if="xcore">preceding-sibling</g:string>
      
      
      
      
      
      <g:string process-value="yes" if="update10 update30 xcore xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">return</g:string>
      
      
      
      <g:string process-value="yes" not-if="xpath1">satisfies</g:string>
      
      
      <g:string process-value="yes">self</g:string>
      
      
      
      
      
      <g:string process-value="yes" not-if="xpath1">some</g:string>
      
      
      
      
      
      
      <g:string process-value="yes" not-if="xpath1">then</g:string>
      
      
      <g:string process-value="yes" if="fulltext xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">to</g:string>
      
      <g:string process-value="yes" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">treat</g:string>
      
      
      
      <g:string process-value="yes" if="fulltext xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">union</g:string>
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    </g:choice>
  </g:production>

  


  

  

  

  

  

  

  
  

  
  <g:token name="NumericLiteralError" show="no">
    <g:choice name="DoubleStringNumericLiteralError">
      <g:sequence>
        <g:string>.</g:string>
        <g:ref name="Digits"/>
      </g:sequence>
      <g:sequence>
        <g:ref name="Digits"/>
        <g:optional name="DoubleOptionFractionPartNumericLiteralError">
          <g:string>.</g:string>
          <g:zeroOrMore name="DoubleFractionPartNumericLiteralError">
            <g:charClass>
              <g:charRange minChar="0" maxChar="9"/>
            </g:charClass>
          </g:zeroOrMore>
        </g:optional>
      </g:sequence>
    </g:choice>
    <g:optional name="NumericLiteralErrorOptionalFractionPart">
      <g:charClass>
        <g:char>e</g:char>
        <g:char>E</g:char>
      </g:charClass>
      <g:optional name="DoubleNegOrPosNumericLiteralError">
        <g:charClass>
          <g:char>+</g:char>
          <g:char>-</g:char>
        </g:charClass>
      </g:optional>
      <g:ref name="Digits"/>
    </g:optional>
    <g:charClass>
      <g:charRange minChar="a" maxChar="z"/>
      <g:charRange minChar="A" maxChar="Z"/>
    </g:charClass>
  </g:token>

  

  <g:token name="Slash">
    <g:string>/</g:string>
  </g:token>

  <g:token name="SlashSlash">
    <g:string>//</g:string>
  </g:token>

  

  

  

  <g:token name="Lbrace" if="fulltext update10 update30 xcore xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string>{</g:string>
  </g:token>

  <g:token name="Rbrace" if="fulltext xcore xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string>}</g:string>
  </g:token>

  

  

  <g:token name="LeftAngleBracket">
    <g:string>&lt;</g:string>
  </g:token>

  <g:token name="Plus" value-type="id">
    <g:string>+</g:string>
  </g:token>

  <g:token name="Minus" value-type="id">
    <g:string>-</g:string>
  </g:token>

  

  

  <g:token name="URIQualifiedStar" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns" inline="true">
    <g:ref name="BracedURILiteral"/>
    <g:string>*</g:string>
  </g:token>

  <g:token name="NCNameColonStar" value-type="string" inline="true">
    <g:ref name="NCNameTok"/>
    <g:string not-if="xpath31 xpath40 xquery31 xquery40">:</g:string>
    <g:string not-if="xpath31 xpath40 xquery31 xquery40">*</g:string>
    
  </g:token>

  <g:token name="StarColonNCName" value-type="string" not-if="xpath1" inline="true">
    <g:string not-if="xpath31 xpath40 xquery31 xquery40">*</g:string>
    <g:string not-if="xpath31 xpath40 xquery31 xquery40">:</g:string>
    
    <g:ref name="NCNameTok"/>
  </g:token>

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  
  

  

  

  

  

  
  

  <g:token name="IntegerLiteral" inline="false" value-type="number" delimiter-type="nondelimiting">
    <g:ref name="Digits"/>
  </g:token>

  <g:token name="DecimalLiteral" inline="false" value-type="number" whitespace-spec="explicit" delimiter-type="nondelimiting">
    <g:choice name="DecimalString">
      <g:sequence>
        <g:string>.</g:string>
        <g:ref name="Digits"/>
      </g:sequence>
      <g:sequence>
        <g:ref name="Digits"/>
        <g:string>.</g:string>
        <g:zeroOrMore name="DecimalFractionPart">
          <g:charClass>
            <g:charRange minChar="0" maxChar="9"/>
          </g:charClass>
        </g:zeroOrMore>
      </g:sequence>
    </g:choice>
  </g:token>

  <g:token name="DoubleLiteral" inline="false" delimiter-type="nondelimiting" value-type="number" whitespace-spec="explicit" not-if="xpath1">
    <g:choice name="DoubleString">
      <g:sequence>
        <g:string>.</g:string>
        <g:ref name="Digits"/>
      </g:sequence>
      <g:sequence>
        <g:ref name="Digits"/>
        <g:optional name="DoubleOptionFractionPart">
          <g:string>.</g:string>
          <g:zeroOrMore name="DoubleFractionPart">
            <g:charClass>
              <g:charRange minChar="0" maxChar="9"/>
            </g:charClass>
          </g:zeroOrMore>
        </g:optional>
      </g:sequence>
    </g:choice>
    <g:charClass>
      <g:char>e</g:char>
      <g:char>E</g:char>
    </g:charClass>
    <g:optional name="DoubleNegOrPos">
      <g:charClass>
        <g:char>+</g:char>
        <g:char>-</g:char>
      </g:charClass>
    </g:optional>
    <g:ref name="Digits"/>
  </g:token>

  <g:token name="StringLiteral" inline="false" value-type="string" whitespace-spec="explicit" delimiter-type="delimiting">
    <g:choice name="StringDilimitType">
      <g:sequence>
        <g:string>"</g:string>
        <g:zeroOrMore name="CharsInQuote">
          <g:choice name="QuoteTypeChar">
            
            
            <g:ref name="EscapeQuot" not-if="xpath1"/>
            <g:complement>
              <g:charClass>
                <g:char>"</g:char>
                
              </g:charClass>
            </g:complement>
          </g:choice>
        </g:zeroOrMore>
        <g:string>"</g:string>
      </g:sequence>
      <g:sequence>
        <g:string>'</g:string>
        <g:zeroOrMore name="CharsInApos">
          <g:choice name="AposTypeChar">
            
            
            <g:ref name="EscapeApos" not-if="xpath1"/>
            <g:complement>
              <g:charClass>
                <g:char>'</g:char>
                
              </g:charClass>
            </g:complement>
          </g:choice>
        </g:zeroOrMore>
        <g:string>'</g:string>
      </g:sequence>
    </g:choice>
  </g:token>

  <g:token name="URIQualifiedName" inline="false" whitespace-spec="explicit" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:ref name="BracedURILiteral"/>
    <g:ref name="NCNameTok"/>
  </g:token>

  <g:token name="BracedURILiteral" inline="false" whitespace-spec="explicit" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string>Q</g:string>
    <g:string>{</g:string>
    <g:zeroOrMore>
      <g:choice>
        
        
        <g:complement>
          <g:charClass>
            
            <g:char>{</g:char>
            <g:char>}</g:char>
          </g:charClass>
        </g:complement>
      </g:choice>
    </g:zeroOrMore>
    <g:string>}</g:string>
  </g:token>

  

  <g:token name="EscapeQuot" inline="false" delimiter-type="hide" not-if="xpath1">
    <g:string>""</g:string>
  </g:token>

  <g:token name="EscapeApos" inline="false" delimiter-type="hide" not-if="xpath1">
    <g:string>''</g:string>
  </g:token>

  

  

  

  <g:token name="Comment" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns" inline="false" comment-id="comments" exposition-only="yes" whitespace-spec="explicit" delimiter-type="hide">
    <g:ref name="CommentStart"/>
    <g:zeroOrMore name="OptionalCommentContent">
      <g:choice name="CharOrComment">
        <g:ref name="CommentContents"/>
        <g:ref name="Comment"/>
      </g:choice>
    </g:zeroOrMore>
    <g:ref name="CommentEnd"/>
  </g:token>

  

  

  

  <g:token name="QNameToken" exposition-name="QName" delimiter-type="nondelimiting" inline="false" node-type="void" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml-names/#NT-QName" xgc-id="xml-version">
    <g:optional name="QNamePrefixAndDelimiter">
      <g:ref name="NCNameTok"/>
      <g:string>:</g:string>
    </g:optional>
    <g:ref name="LocalPart"/>
  </g:token>

  <g:token name="NCNameTok" exposition-name="NCName" delimiter-type="nondelimiting" inline="false" value-type="string" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml-names/#NT-NCName" xgc-id="xml-version">
    <g:ref name="Nmstart"/>
    <g:zeroOrMore name="NCNameTail">
      <g:ref name="Nmchar"/>
    </g:zeroOrMore>
  </g:token>

  

  <g:token name="Char" inline="false" delimiter-type="hide" value-type="string" is-xml="yes" xgc-id="xml-version" xhref="http://www.w3.org/TR/REC-xml#NT-Char">
    <g:charClass>
      <g:charCode value="0009"/>
      <g:charCode value="000D"/>
      <g:charCode value="000A"/>
      
      <g:charCodeRange minValue="0020" maxValue="FFFD"/>
    </g:charClass>
  </g:token>

  

  <g:token name="Digits" delimiter-type="hide" inline="false" is-local-to-terminal-symbol="yes">
    <g:oneOrMore name="DigitsString">
      <g:charClass>
        <g:charRange minChar="0" maxChar="9"/>
      </g:charClass>
    </g:oneOrMore>
  </g:token>

  <g:token name="CommentContents" exposition-only="yes" delimiter-type="hide" inline="false" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns" is-local-to-terminal-symbol="yes">
    <g:oneOrMore name="CommentContentBody" subtract-reg-expr="(Char* ('(:' | ':)') Char*)">
      <g:ref name="CommentContent"/>
    </g:oneOrMore>
  </g:token>

  
   

  

  
  <g:token name="WhitespaceChar" inline="false" show="no">
    <g:charClass>
      
      
      
      
      
      
      
      
      
      <g:charCode value="0009"/>
      <g:charCode value="000D"/>
      <g:charCode value="000A"/>
      
      
      <g:charCode value="0020"/>
    </g:charClass>
  </g:token>

  <g:token name="LocalPart" value-type="string" show="no" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml-names/#NT-LocalPart" xgc-id="xml-version">
    <g:ref name="NCNameTok"/>
  </g:token>

  <g:token name="Nmstart" inline="false" show="no">
    <g:choice name="NmstartChar">
      <g:ref name="Letter"/>
      <g:string>_</g:string>
    </g:choice>
  </g:token>

  <g:token name="Nmchar" inline="false" show="no">
    <g:choice name="NmcharChoice">
      <g:ref name="Letter"/>
      <g:ref name="CombiningChar"/>
      <g:ref name="Extender"/>
      <g:ref name="Digit"/>
      <g:string>.</g:string>
      <g:string>-</g:string>
      <g:string>_</g:string>
    </g:choice>
  </g:token>

  <g:token name="Letter" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-Letter" xgc-id="xml-version" show="no">
    <g:choice name="LetterChars">
      <g:ref name="BaseChar"/>
      <g:ref name="Ideographic"/>
    </g:choice>
  </g:token>

  <g:token name="BaseChar" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-BaseChar" xgc-id="xml-version" show="no">
    <g:charClass>
      <g:charCodeRange minValue="0041" maxValue="005a"/>
      <g:charCodeRange minValue="0061" maxValue="007a"/>
      <g:charCodeRange minValue="00c0" maxValue="00d6"/>
      <g:charCodeRange minValue="00d8" maxValue="00f6"/>
      <g:charCodeRange minValue="00f8" maxValue="00ff"/>
      <g:charCodeRange minValue="0100" maxValue="0131"/>
      <g:charCodeRange minValue="0134" maxValue="013e"/>
      <g:charCodeRange minValue="0141" maxValue="0148"/>
      <g:charCodeRange minValue="014a" maxValue="017e"/>
      <g:charCodeRange minValue="0180" maxValue="01c3"/>
      <g:charCodeRange minValue="01cd" maxValue="01f0"/>
      <g:charCodeRange minValue="01f4" maxValue="01f5"/>
      <g:charCodeRange minValue="01fa" maxValue="0217"/>
      <g:charCodeRange minValue="0250" maxValue="02a8"/>
      <g:charCodeRange minValue="02bb" maxValue="02c1"/>
      <g:charCode value="0386"/>
      <g:charCodeRange minValue="0388" maxValue="038a"/>
      <g:charCode value="038c"/>
      <g:charCodeRange minValue="038e" maxValue="03a1"/>
      <g:charCodeRange minValue="03a3" maxValue="03ce"/>
      <g:charCodeRange minValue="03d0" maxValue="03d6"/>
      <g:charCode value="03da"/>
      <g:charCode value="03dc"/>
      <g:charCode value="03de"/>
      <g:charCode value="03e0"/>
      <g:charCodeRange minValue="03e2" maxValue="03f3"/>
      <g:charCodeRange minValue="0401" maxValue="040c"/>
      <g:charCodeRange minValue="040e" maxValue="044f"/>
      <g:charCodeRange minValue="0451" maxValue="045c"/>
      <g:charCodeRange minValue="045e" maxValue="0481"/>
      <g:charCodeRange minValue="0490" maxValue="04c4"/>
      <g:charCodeRange minValue="04c7" maxValue="04c8"/>
      <g:charCodeRange minValue="04cb" maxValue="04cc"/>
      <g:charCodeRange minValue="04d0" maxValue="04eb"/>
      <g:charCodeRange minValue="04ee" maxValue="04f5"/>
      <g:charCodeRange minValue="04f8" maxValue="04f9"/>
      <g:charCodeRange minValue="0531" maxValue="0556"/>
      <g:charCode value="0559"/>
      <g:charCodeRange minValue="0561" maxValue="0586"/>
      <g:charCodeRange minValue="05d0" maxValue="05ea"/>
      <g:charCodeRange minValue="05f0" maxValue="05f2"/>
      <g:charCodeRange minValue="0621" maxValue="063a"/>
      <g:charCodeRange minValue="0641" maxValue="064a"/>
      <g:charCodeRange minValue="0671" maxValue="06b7"/>
      <g:charCodeRange minValue="06ba" maxValue="06be"/>
      <g:charCodeRange minValue="06c0" maxValue="06ce"/>
      <g:charCodeRange minValue="06d0" maxValue="06d3"/>
      <g:charCode value="06d5"/>
      <g:charCodeRange minValue="06e5" maxValue="06e6"/>
      <g:charCodeRange minValue="0905" maxValue="0939"/>
      <g:charCode value="093d"/>
      <g:charCodeRange minValue="0958" maxValue="0961"/>
      <g:charCodeRange minValue="0985" maxValue="098c"/>
      <g:charCodeRange minValue="098f" maxValue="0990"/>
      <g:charCodeRange minValue="0993" maxValue="09a8"/>
      <g:charCodeRange minValue="09aa" maxValue="09b0"/>
      <g:charCode value="09b2"/>
      <g:charCodeRange minValue="09b6" maxValue="09b9"/>
      <g:charCodeRange minValue="09dc" maxValue="09dd"/>
      <g:charCodeRange minValue="09df" maxValue="09e1"/>
      <g:charCodeRange minValue="09f0" maxValue="09f1"/>
      <g:charCodeRange minValue="0a05" maxValue="0a0a"/>
      <g:charCodeRange minValue="0a0f" maxValue="0a10"/>
      <g:charCodeRange minValue="0a13" maxValue="0a28"/>
      <g:charCodeRange minValue="0a2a" maxValue="0a30"/>
      <g:charCodeRange minValue="0a32" maxValue="0a33"/>
      <g:charCodeRange minValue="0a35" maxValue="0a36"/>
      <g:charCodeRange minValue="0a38" maxValue="0a39"/>
      <g:charCodeRange minValue="0a59" maxValue="0a5c"/>
      <g:charCode value="0a5e"/>
      <g:charCodeRange minValue="0a72" maxValue="0a74"/>
      <g:charCodeRange minValue="0a85" maxValue="0a8b"/>
      <g:charCode value="0a8d"/>
      <g:charCodeRange minValue="0a8f" maxValue="0a91"/>
      <g:charCodeRange minValue="0a93" maxValue="0aa8"/>
      <g:charCodeRange minValue="0aaa" maxValue="0ab0"/>
      <g:charCodeRange minValue="0ab2" maxValue="0ab3"/>
      <g:charCodeRange minValue="0ab5" maxValue="0ab9"/>
      <g:charCode value="0abd"/>
      <g:charCode value="0ae0"/>
      <g:charCodeRange minValue="0b05" maxValue="0b0c"/>
      <g:charCodeRange minValue="0b0f" maxValue="0b10"/>
      <g:charCodeRange minValue="0b13" maxValue="0b28"/>
      <g:charCodeRange minValue="0b2a" maxValue="0b30"/>
      <g:charCodeRange minValue="0b32" maxValue="0b33"/>
      <g:charCodeRange minValue="0b36" maxValue="0b39"/>
      <g:charCode value="0b3d"/>
      <g:charCodeRange minValue="0b5c" maxValue="0b5d"/>
      <g:charCodeRange minValue="0b5f" maxValue="0b61"/>
      <g:charCodeRange minValue="0b85" maxValue="0b8a"/>
      <g:charCodeRange minValue="0b8e" maxValue="0b90"/>
      <g:charCodeRange minValue="0b92" maxValue="0b95"/>
      <g:charCodeRange minValue="0b99" maxValue="0b9a"/>
      <g:charCode value="0b9c"/>
      <g:charCodeRange minValue="0b9e" maxValue="0b9f"/>
      <g:charCodeRange minValue="0ba3" maxValue="0ba4"/>
      <g:charCodeRange minValue="0ba8" maxValue="0baa"/>
      <g:charCodeRange minValue="0bae" maxValue="0bb5"/>
      <g:charCodeRange minValue="0bb7" maxValue="0bb9"/>
      <g:charCodeRange minValue="0c05" maxValue="0c0c"/>
      <g:charCodeRange minValue="0c0e" maxValue="0c10"/>
      <g:charCodeRange minValue="0c12" maxValue="0c28"/>
      <g:charCodeRange minValue="0c2a" maxValue="0c33"/>
      <g:charCodeRange minValue="0c35" maxValue="0c39"/>
      <g:charCodeRange minValue="0c60" maxValue="0c61"/>
      <g:charCodeRange minValue="0c85" maxValue="0c8c"/>
      <g:charCodeRange minValue="0c8e" maxValue="0c90"/>
      <g:charCodeRange minValue="0c92" maxValue="0ca8"/>
      <g:charCodeRange minValue="0caa" maxValue="0cb3"/>
      <g:charCodeRange minValue="0cb5" maxValue="0cb9"/>
      <g:charCode value="0cde"/>
      <g:charCodeRange minValue="0ce0" maxValue="0ce1"/>
      <g:charCodeRange minValue="0d05" maxValue="0d0c"/>
      <g:charCodeRange minValue="0d0e" maxValue="0d10"/>
      <g:charCodeRange minValue="0d12" maxValue="0d28"/>
      <g:charCodeRange minValue="0d2a" maxValue="0d39"/>
      <g:charCodeRange minValue="0d60" maxValue="0d61"/>
      <g:charCodeRange minValue="0e01" maxValue="0e2e"/>
      <g:charCode value="0e30"/>
      <g:charCodeRange minValue="0e32" maxValue="0e33"/>
      <g:charCodeRange minValue="0e40" maxValue="0e45"/>
      <g:charCodeRange minValue="0e81" maxValue="0e82"/>
      <g:charCode value="0e84"/>
      <g:charCodeRange minValue="0e87" maxValue="0e88"/>
      <g:charCode value="0e8a"/>
      <g:charCode value="0e8d"/>
      <g:charCodeRange minValue="0e94" maxValue="0e97"/>
      <g:charCodeRange minValue="0e99" maxValue="0e9f"/>
      <g:charCodeRange minValue="0ea1" maxValue="0ea3"/>
      <g:charCode value="0ea5"/>
      <g:charCode value="0ea7"/>
      <g:charCodeRange minValue="0eaa" maxValue="0eab"/>
      <g:charCodeRange minValue="0ead" maxValue="0eae"/>
      <g:charCode value="0eb0"/>
      <g:charCodeRange minValue="0eb2" maxValue="0eb3"/>
      <g:charCode value="0ebd"/>
      <g:charCodeRange minValue="0ec0" maxValue="0ec4"/>
      <g:charCodeRange minValue="0f40" maxValue="0f47"/>
      <g:charCodeRange minValue="0f49" maxValue="0f69"/>
      <g:charCodeRange minValue="10a0" maxValue="10c5"/>
      <g:charCodeRange minValue="10d0" maxValue="10f6"/>
      <g:charCode value="1100"/>
      <g:charCodeRange minValue="1102" maxValue="1103"/>
      <g:charCodeRange minValue="1105" maxValue="1107"/>
      <g:charCode value="1109"/>
      <g:charCodeRange minValue="110b" maxValue="110c"/>
      <g:charCodeRange minValue="110e" maxValue="1112"/>
      <g:charCode value="113c"/>
      <g:charCode value="113e"/>
      <g:charCode value="1140"/>
      <g:charCode value="114c"/>
      <g:charCode value="114e"/>
      <g:charCode value="1150"/>
      <g:charCodeRange minValue="1154" maxValue="1155"/>
      <g:charCode value="1159"/>
      <g:charCodeRange minValue="115f" maxValue="1161"/>
      <g:charCode value="1163"/>
      <g:charCode value="1165"/>
      <g:charCode value="1167"/>
      <g:charCode value="1169"/>
      <g:charCodeRange minValue="116d" maxValue="116e"/>
      <g:charCodeRange minValue="1172" maxValue="1173"/>
      <g:charCode value="1175"/>
      <g:charCode value="119e"/>
      <g:charCode value="11a8"/>
      <g:charCode value="11ab"/>
      <g:charCodeRange minValue="11ae" maxValue="11af"/>
      <g:charCodeRange minValue="11b7" maxValue="11b8"/>
      <g:charCode value="11ba"/>
      <g:charCodeRange minValue="11bc" maxValue="11c2"/>
      <g:charCode value="11eb"/>
      <g:charCode value="11f0"/>
      <g:charCode value="11f9"/>
      <g:charCodeRange minValue="1e00" maxValue="1e9b"/>
      <g:charCodeRange minValue="1ea0" maxValue="1ef9"/>
      <g:charCodeRange minValue="1f00" maxValue="1f15"/>
      <g:charCodeRange minValue="1f18" maxValue="1f1d"/>
      <g:charCodeRange minValue="1f20" maxValue="1f45"/>
      <g:charCodeRange minValue="1f48" maxValue="1f4d"/>
      <g:charCodeRange minValue="1f50" maxValue="1f57"/>
      <g:charCode value="1f59"/>
      <g:charCode value="1f5b"/>
      <g:charCode value="1f5d"/>
      <g:charCodeRange minValue="1f5f" maxValue="1f7d"/>
      <g:charCodeRange minValue="1f80" maxValue="1fb4"/>
      <g:charCodeRange minValue="1fb6" maxValue="1fbc"/>
      <g:charCode value="1fbe"/>
      <g:charCodeRange minValue="1fc2" maxValue="1fc4"/>
      <g:charCodeRange minValue="1fc6" maxValue="1fcc"/>
      <g:charCodeRange minValue="1fd0" maxValue="1fd3"/>
      <g:charCodeRange minValue="1fd6" maxValue="1fdb"/>
      <g:charCodeRange minValue="1fe0" maxValue="1fec"/>
      <g:charCodeRange minValue="1ff2" maxValue="1ff4"/>
      <g:charCodeRange minValue="1ff6" maxValue="1ffc"/>
      <g:charCode value="2126"/>
      <g:charCodeRange minValue="212a" maxValue="212b"/>
      <g:charCode value="212e"/>
      <g:charCodeRange minValue="2180" maxValue="2182"/>
      <g:charCodeRange minValue="3041" maxValue="3094"/>
      <g:charCodeRange minValue="30a1" maxValue="30fa"/>
      <g:charCodeRange minValue="3105" maxValue="312c"/>
      <g:charCodeRange minValue="ac00" maxValue="d7a3"/>
    </g:charClass>
  </g:token>

  <g:token name="Ideographic" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-Ideographic" xgc-id="xml-version" show="no">
    <g:charClass>
      <g:charCodeRange minValue="4e00" maxValue="9fa5"/>
      <g:charCode value="3007"/>
      <g:charCodeRange minValue="3021" maxValue="3029"/>
    </g:charClass>
  </g:token>

  <g:token name="CombiningChar" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-CombiningChar" xgc-id="xml-version" show="no">
    <g:charClass>
      <g:charCodeRange minValue="0300" maxValue="0345"/>
      <g:charCodeRange minValue="0360" maxValue="0361"/>
      <g:charCodeRange minValue="0483" maxValue="0486"/>
      <g:charCodeRange minValue="0591" maxValue="05a1"/>
      <g:charCodeRange minValue="05a3" maxValue="05b9"/>
      <g:charCodeRange minValue="05bb" maxValue="05bd"/>
      <g:charCode value="05bf"/>
      <g:charCodeRange minValue="05c1" maxValue="05c2"/>
      <g:charCode value="05c4"/>
      <g:charCodeRange minValue="064b" maxValue="0652"/>
      <g:charCode value="0670"/>
      <g:charCodeRange minValue="06d6" maxValue="06dc"/>
      <g:charCodeRange minValue="06dd" maxValue="06df"/>
      <g:charCodeRange minValue="06e0" maxValue="06e4"/>
      <g:charCodeRange minValue="06e7" maxValue="06e8"/>
      <g:charCodeRange minValue="06ea" maxValue="06ed"/>
      <g:charCodeRange minValue="0901" maxValue="0903"/>
      <g:charCode value="093c"/>
      <g:charCodeRange minValue="093e" maxValue="094c"/>
      <g:charCode value="094d"/>
      <g:charCodeRange minValue="0951" maxValue="0954"/>
      <g:charCodeRange minValue="0962" maxValue="0963"/>
      <g:charCodeRange minValue="0981" maxValue="0983"/>
      <g:charCode value="09bc"/>
      <g:charCode value="09be"/>
      <g:charCode value="09bf"/>
      <g:charCodeRange minValue="09c0" maxValue="09c4"/>
      <g:charCodeRange minValue="09c7" maxValue="09c8"/>
      <g:charCodeRange minValue="09cb" maxValue="09cd"/>
      <g:charCode value="09d7"/>
      <g:charCodeRange minValue="09e2" maxValue="09e3"/>
      <g:charCode value="0a02"/>
      <g:charCode value="0a3c"/>
      <g:charCode value="0a3e"/>
      <g:charCode value="0a3f"/>
      <g:charCodeRange minValue="0a40" maxValue="0a42"/>
      <g:charCodeRange minValue="0a47" maxValue="0a48"/>
      <g:charCodeRange minValue="0a4b" maxValue="0a4d"/>
      <g:charCodeRange minValue="0a70" maxValue="0a71"/>
      <g:charCodeRange minValue="0a81" maxValue="0a83"/>
      <g:charCode value="0abc"/>
      <g:charCodeRange minValue="0abe" maxValue="0ac5"/>
      <g:charCodeRange minValue="0ac7" maxValue="0ac9"/>
      <g:charCodeRange minValue="0acb" maxValue="0acd"/>
      <g:charCodeRange minValue="0b01" maxValue="0b03"/>
      <g:charCode value="0b3c"/>
      <g:charCodeRange minValue="0b3e" maxValue="0b43"/>
      <g:charCodeRange minValue="0b47" maxValue="0b48"/>
      <g:charCodeRange minValue="0b4b" maxValue="0b4d"/>
      <g:charCodeRange minValue="0b56" maxValue="0b57"/>
      <g:charCodeRange minValue="0b82" maxValue="0b83"/>
      <g:charCodeRange minValue="0bbe" maxValue="0bc2"/>
      <g:charCodeRange minValue="0bc6" maxValue="0bc8"/>
      <g:charCodeRange minValue="0bca" maxValue="0bcd"/>
      <g:charCode value="0bd7"/>
      <g:charCodeRange minValue="0c01" maxValue="0c03"/>
      <g:charCodeRange minValue="0c3e" maxValue="0c44"/>
      <g:charCodeRange minValue="0c46" maxValue="0c48"/>
      <g:charCodeRange minValue="0c4a" maxValue="0c4d"/>
      <g:charCodeRange minValue="0c55" maxValue="0c56"/>
      <g:charCodeRange minValue="0c82" maxValue="0c83"/>
      <g:charCodeRange minValue="0cbe" maxValue="0cc4"/>
      <g:charCodeRange minValue="0cc6" maxValue="0cc8"/>
      <g:charCodeRange minValue="0cca" maxValue="0ccd"/>
      <g:charCodeRange minValue="0cd5" maxValue="0cd6"/>
      <g:charCodeRange minValue="0d02" maxValue="0d03"/>
      <g:charCodeRange minValue="0d3e" maxValue="0d43"/>
      <g:charCodeRange minValue="0d46" maxValue="0d48"/>
      <g:charCodeRange minValue="0d4a" maxValue="0d4d"/>
      <g:charCode value="0d57"/>
      <g:charCode value="0e31"/>
      <g:charCodeRange minValue="0e34" maxValue="0e3a"/>
      <g:charCodeRange minValue="0e47" maxValue="0e4e"/>
      <g:charCode value="0eb1"/>
      <g:charCodeRange minValue="0eb4" maxValue="0eb9"/>
      <g:charCodeRange minValue="0ebb" maxValue="0ebc"/>
      <g:charCodeRange minValue="0ec8" maxValue="0ecd"/>
      <g:charCodeRange minValue="0f18" maxValue="0f19"/>
      <g:charCode value="0f35"/>
      <g:charCode value="0f37"/>
      <g:charCode value="0f39"/>
      <g:charCode value="0f3e"/>
      <g:charCode value="0f3f"/>
      <g:charCodeRange minValue="0f71" maxValue="0f84"/>
      <g:charCodeRange minValue="0f86" maxValue="0f8b"/>
      <g:charCodeRange minValue="0f90" maxValue="0f95"/>
      <g:charCode value="0f97"/>
      <g:charCodeRange minValue="0f99" maxValue="0fad"/>
      <g:charCodeRange minValue="0fb1" maxValue="0fb7"/>
      <g:charCode value="0fb9"/>
      <g:charCodeRange minValue="20d0" maxValue="20dc"/>
      <g:charCode value="20e1"/>
      <g:charCodeRange minValue="302a" maxValue="302f"/>
      <g:charCode value="3099"/>
      <g:charCode value="309a"/>
    </g:charClass>
  </g:token>

  <g:token name="Digit" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-Digit" show="no">
    <g:charClass>
      <g:charCodeRange minValue="0030" maxValue="0039"/>
      <g:charCodeRange minValue="0660" maxValue="0669"/>
      <g:charCodeRange minValue="06f0" maxValue="06f9"/>
      <g:charCodeRange minValue="0966" maxValue="096f"/>
      <g:charCodeRange minValue="09e6" maxValue="09ef"/>
      <g:charCodeRange minValue="0a66" maxValue="0a6f"/>
      <g:charCodeRange minValue="0ae6" maxValue="0aef"/>
      <g:charCodeRange minValue="0b66" maxValue="0b6f"/>
      <g:charCodeRange minValue="0be7" maxValue="0bef"/>
      <g:charCodeRange minValue="0c66" maxValue="0c6f"/>
      <g:charCodeRange minValue="0ce6" maxValue="0cef"/>
      <g:charCodeRange minValue="0d66" maxValue="0d6f"/>
      <g:charCodeRange minValue="0e50" maxValue="0e59"/>
      <g:charCodeRange minValue="0ed0" maxValue="0ed9"/>
      <g:charCodeRange minValue="0f20" maxValue="0f29"/>
    </g:charClass>
  </g:token>

  <g:token name="Extender" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-Extender" xgc-id="xml-version" show="no">
    <g:charClass>
      <g:charCode value="00b7"/>
      <g:charCode value="02d0"/>
      <g:charCode value="02d1"/>
      <g:charCode value="0387"/>
      <g:charCode value="0640"/>
      <g:charCode value="0e46"/>
      <g:charCode value="0ec6"/>
      <g:charCode value="3005"/>
      <g:charCodeRange minValue="3031" maxValue="3035"/>
      <g:charCodeRange minValue="309d" maxValue="309e"/>
      <g:charCodeRange minValue="30fc" maxValue="30fe"/>
    </g:charClass>
  </g:token>

  <g:token name="CommentStart" token-kind="skip" inline="true" comment-id="comments">
    <g:string>(:</g:string>
  </g:token>

  <g:token name="CommentEnd" token-kind="skip" inline="true">
    <g:string>:)</g:string>
  </g:token>

  <g:token name="CommentContent" token-kind="skip" inline="true">
    <g:ref name="Char"/>
  </g:token>

  <g:token name="ImplicitlyAllowedWhitespace" token-kind="skip" show="no">
    <g:oneOrMore>
      <g:ref name="WhitespaceChar"/>
    </g:oneOrMore>
  </g:token>

  
  <g:state-list>

    <g:state name="ANY" show="no">
      <g:description>
        This is not an actual state, but rather a collection of
        sub-terminals that are referenced by g:token rules.
        In the file that is generated for input to JavaCC,
        each becomes a "private regular expression".
        (It would be better to make this distinction
        in the g:token element.)
      </g:description>
      <g:transition>
        <g:description>No state change.</g:description>
        <g:tref name="BracedURILiteral" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
        <g:tref name="WhitespaceChar"/>
        <g:tref name="Nmstart"/>
        <g:tref name="NCNameTok"/>
        <g:tref name="Nmchar"/>
        <g:tref name="LocalPart"/>
        <g:tref name="Digits"/>
        <g:tref name="Letter"/>
        <g:tref name="BaseChar"/>
        <g:tref name="Ideographic"/>
        <g:tref name="CombiningChar"/>
        <g:tref name="Digit"/>
        <g:tref name="Extender"/>
        <g:tref name="HexDigits"/>
        <g:tref name="Comment"/>
        <g:tref name="CommentContents" if="xpath20 xpath30 xpath31 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns"/>
        <g:tref name="EscapeQuot" if="xpath20 xpath30 xpath31 xpath40 xslt2-patterns xslt30-patterns xslt40-patterns"/>
        <g:tref name="EscapeApos" if="xpath20 xpath30 xpath31 xpath40 xslt2-patterns xslt30-patterns xslt40-patterns"/>
        <g:tref name="Char" if="xpath1 xpath20 xpath30 xpath31 xpath40 xslt2-patterns xslt30-patterns xslt40-patterns"/>
      </g:transition>
    </g:state>

    <g:state name="DEFAULT">
      <g:description>XXX</g:description>
      
      <g:transition next-state="EXPR_COMMENT" action="pushState">
        <g:tref name="CommentStart"/>
      </g:transition>
      
      
      
      <g:transition next-state="DEFAULT" action="pushState" if="xpath1 xpath20 xpath30 xpath31 xpath40 xslt2-patterns xslt30-patterns xslt40-patterns">
        <g:tref name="LeftAngleBracket"/>
      </g:transition>
      
      
      
      <g:transition action="popState">
        <g:tref name="Rbrace"/>
      </g:transition>
      <g:transition next-state="DEFAULT" action="pushState">
        <g:tref name="Lbrace"/>
      </g:transition>
      <g:transition>
        <g:tref name="ImplicitlyAllowedWhitespace"/>
        <g:tref name="Slash"/>
        <g:tref name="SlashSlash"/>
        <g:tref name="URIQualifiedName" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
        <g:tref name="IntegerLiteral"/>
        <g:tref name="DecimalLiteral"/>
        <g:tref name="DoubleLiteral" not-if="xpath1"/>
        <g:tref name="StringLiteral"/>
        <g:tref name="QNameToken"/>
        <g:tref name="NCNameColonStar"/>
        <g:tref name="StarColonNCName"/>
        <g:tref name="URIQualifiedStar" if="xpath30 xpath31 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
        <g:tref name="NumericLiteralError"/>
        <g:tref name="Minus"/>
        <g:tref name="Plus"/>
        
        
        
        
        
      </g:transition>
    </g:state>

    <g:state name="EXPR_COMMENT">
      <g:description>The "(:" token marks the beginning of an expression
                Comment, and the ":)" token marks the end. This allows no special
                interpretation of other characters in this state.</g:description>
      <g:transition action="popState">
        <g:tref name="CommentEnd"/>
      </g:transition>
      <g:transition next-state="EXPR_COMMENT" action="pushState">
        <g:tref name="CommentStart"/>
      </g:transition>
      <g:transition>
        <g:description>No state change.</g:description>
        <g:tref name="CommentContent"/>
      </g:transition>
    </g:state>

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

  </g:state-list>

</g:grammar>