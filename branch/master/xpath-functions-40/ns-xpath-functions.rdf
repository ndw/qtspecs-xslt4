<?xml version="1.0" encoding="UTF-8"?>
<!--XSLT Processor: Saxonica SAXON HE 9.6.0.7-->
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:rddl="http://www.rddl.org/"
         xmlns:rddlx="http://www.rddl.org/natures#"
         xmlns:fn="http://www.w3.org/2005/xpath-functions"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:rddlp="http://www.rddl.org/purposes#"
         xmlns:owl="http://www.w3.org/2002/07/owl#"
         xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#">
   <owl:Ontology rdf:about="">
      <owl:imports rdf:resource="link.rdf"/>
      <owl:imports rdf:resource="rddl.owl"/>
   </owl:Ontology>
   <owl:Ontology rdf:about="link.rdf"/>
   <owl:Ontology rdf:about="rddl.owl"/>
   <rdf:Description rdf:about="http://www.w3.org/2005/xpath-functions">
      <rdf:type rdf:resource="http://www.w3.org/2007/ont/link#Document"/>absabs(xs:numeric?) as xs:numeric?
         Returns the absolute value of $value.
      adjust-dateTime-to-timezoneadjust-dateTime-to-timezone(xs:dateTime?) as xs:dateTime?adjust-dateTime-to-timezone(xs:dateTime?, xs:dayTimeDuration?) as xs:dateTime?
         Adjusts an xs:dateTime value to a specific timezone, or to no timezone at
            all.
      adjust-date-to-timezoneadjust-date-to-timezone(xs:date?) as xs:date?adjust-date-to-timezone(xs:date?, xs:dayTimeDuration?) as xs:date?
         Adjusts an xs:date value to a specific timezone, or to no timezone at all;
            the result is the date in the target timezone that contains the starting instant of the
            supplied date.
      adjust-time-to-timezoneadjust-time-to-timezone(xs:time?) as xs:time?adjust-time-to-timezone(xs:time?, xs:dayTimeDuration?) as xs:time?
         Adjusts an xs:time value to a specific timezone, or to no timezone at
            all.
      allall(item()*, function(item()) as xs:boolean) as xs:integer*
         Returns true if all items in the input sequence match a supplied predicate.
      analyze-stringanalyze-string(xs:string?, xs:string) as element(fn:analyze-string-result)analyze-string(xs:string?, xs:string, xs:string) as element(fn:analyze-string-result)
         Analyzes a string using a regular expression, returning an XML structure that identifies
            which parts of the input string matched or failed to match the regular expression, and
            in the case of matched substrings, which substrings matched each capturing group in the
            regular expression.
      applyapply(function(*), array(*)) as item()*
         Makes a dynamic call on a function with an argument list supplied in the form of an array.
      available-environment-variablesavailable-environment-variables() as xs:string*
         Returns a list of environment variable names that are suitable for passing to
               fn:environment-variable, as a (possibly empty) sequence of strings.
      avgavg(xs:anyAtomicType*) as xs:anyAtomicType?
         Returns the average of the values in the input sequence $values, that is, the
            sum of the values divided by the number of values.
      base-uribase-uri() as xs:anyURI?base-uri(node()?) as xs:anyURI?
         Returns the base URI of a node.
      booleanboolean(item()*) as xs:boolean
         Computes the effective boolean value of the sequence $input.
      ceilingceiling(xs:numeric?) as xs:numeric?
         Rounds $value upwards to a whole number.
      characterscharacters(xs:string?) as xs:string*
         Splits the supplied string into a sequence of single-character strings.
      codepoint-equalcodepoint-equal(xs:string?, xs:string?) as xs:boolean?
         Returns true if two strings are equal, considered codepoint-by-codepoint.
      codepoints-to-stringcodepoints-to-string(xs:integer*) as xs:string
         Returns an xs:string whose characters have supplied codepoints.
      collation-keycollation-key(xs:string) as xs:base64Binarycollation-key(xs:string, xs:string) as xs:base64Binary
         Given a string value and a collation, generates an internal value called a collation key, with the property that
            the matching and ordering of collation keys reflects the matching and ordering of strings under the specified collation.
      collectioncollection() as item()*collection(xs:string?) as item()*
         Returns a sequence of items identified by a
            collection URI; or a default collection if no URI is supplied.
      comparecompare(xs:string?, xs:string?) as xs:integer?compare(xs:string?, xs:string?, xs:string) as xs:integer?
         Returns -1, 0, or 1, depending on whether $value1 collates before,
            equal to, or after $value2 according to the rules of a selected
            collation.
      concatconcat(xs:anyAtomicType?, xs:anyAtomicType?, xs:anyAtomicType?) as xs:string
         Returns the concatenation of the string values of the arguments.
      containscontains(xs:string?, xs:string?) as xs:booleancontains(xs:string?, xs:string?, xs:string) as xs:boolean
         Returns true if the string $value contains $substring as a
            substring, taking collations into account.
      contains-tokencontains-token(xs:string*, xs:string) as xs:booleancontains-token(xs:string*, xs:string, xs:string) as xs:boolean
         Determines whether or not any of the supplied strings, when tokenized at whitespace boundaries, contains the supplied token,
            under the rules of the supplied collation.
      countcount(item()*) as xs:integer
         Returns the number of items in a sequence.
      current-datecurrent-date() as xs:date
         Returns the current date.
      current-dateTimecurrent-dateTime() as xs:dateTimeStamp
         Returns the current date and time (with timezone).
      current-timecurrent-time() as xs:time
         Returns the current time.
      datadata() as xs:anyAtomicType*data(item()*) as xs:anyAtomicType*
         Returns the result of atomizing a sequence. This process flattens arrays, and replaces 
            nodes by their typed values.
      dateTimedateTime(xs:date?, xs:time?) as xs:dateTime?
         Returns an xs:dateTime value created by combining an xs:date
            and an xs:time.
      day-from-dateday-from-date(xs:date?) as xs:integer?
         Returns the day component of an xs:date.
      day-from-dateTimeday-from-dateTime(xs:dateTime?) as xs:integer?
         Returns the day component of an xs:dateTime.
      days-from-durationdays-from-duration(xs:duration?) as xs:integer?
         Returns the number of days in a duration.
      deep-equaldeep-equal(item()*, item()*) as xs:booleandeep-equal(item()*, item()*, xs:string) as xs:boolean
          This function assesses whether two sequences are deep-equal to each other. To be
            deep-equal, they must contain items that are pairwise deep-equal; and for two items to
            be deep-equal, they must either be atomic values that compare equal, or nodes of the
            same kind, with the same name, whose children are deep-equal,
               or maps with matching entries, or arrays with matching members.
      default-collationdefault-collation() as xs:string
         Returns the value of the default collation property from the static context. 
      default-languagedefault-language() as xs:language
         Returns the value of the default language property from the dynamic context. 
      differencesdifferences(item(), item()) as map(*)*differences(item(), item(), map(*)) as map(*)*differences(item(), item(), map(*), xs:string) as map(*)*
          This function compares two sequences and returns information about their differences.
      distinct-valuesdistinct-values(xs:anyAtomicType*) as xs:anyAtomicType*distinct-values(xs:anyAtomicType*, xs:string) as xs:anyAtomicType*
         Returns the values that appear in a sequence, with duplicates eliminated.
      docdoc(xs:string?) as document-node()?
         Retrieves a document using a URI supplied as an xs:string, and returns the
            corresponding document node.
      doc-availabledoc-available(xs:string?) as xs:boolean
         The function returns true if and only if the function call fn:doc($href)
            would return a document node.
      document-uridocument-uri() as xs:anyURI?document-uri(node()?) as xs:anyURI?
         Returns the URI of a resource where a document can be found, if available.
      element-with-idelement-with-id(xs:string*) as element()*element-with-id(xs:string*, node()) as element()*
          Returns the sequence of element nodes that have an ID value matching the
            value of one or more of the IDREF values supplied in $values.
      emptyempty(item()*) as xs:boolean
         Returns true if the argument is the empty sequence.
      encode-for-uriencode-for-uri(xs:string?) as xs:string
         Encodes reserved characters in a string that is intended to be used in the path segment
            of a URI.
      ends-withends-with(xs:string?, xs:string?) as xs:booleanends-with(xs:string?, xs:string?, xs:string) as xs:boolean
         Returns true if the string $value contains $substring as a trailing
            substring, taking collations into account.
      environment-variableenvironment-variable(xs:string) as xs:string?
         Returns the value of a system environment variable, if it exists.
      errorerror() as noneerror(xs:QName?) as noneerror(xs:QName?, xs:string) as noneerror(xs:QName?, xs:string, item()*) as none
         Calling the fn:error function raises an application-defined error.
      escape-html-uriescape-html-uri(xs:string?) as xs:string
         Escapes a URI in the same way that HTML user agents handle attribute values expected to
            contain URIs.
      exactly-oneexactly-one(item()*) as item()
         Returns $input if it contains exactly one item. Otherwise, raises an error.
         
      existsexists(item()*) as xs:boolean
         Returns true if the argument is a non-empty sequence.
      falsefalse() as xs:boolean
         Returns the xs:boolean value false.
      filterfilter(item()*, function(item()) as xs:boolean) as item()*
         Returns those items from the sequence $input for which the supplied function
               $predicate returns true.
      floorfloor(xs:numeric?) as xs:numeric?
         Rounds $value downwards to a whole number.
      fold-leftfold-left(item()*, item()*, function(item()*, item()) as item()*) as item()*
         Processes the supplied sequence from left to right, applying the supplied function
            repeatedly to each item in turn, together with an accumulated result value.
      fold-rightfold-right(item()*, item()*, function(item(), item()*) as item()*) as item()*
         Processes the supplied sequence from right to left, applying the supplied function
            repeatedly to each item in turn, together with an accumulated result value.
      for-eachfor-each(item()*, function(item()) as item()*) as item()*
         Applies the function item $action to every item from the sequence $input
            in turn, returning the concatenation of the resulting sequences in order.
      for-each-pairfor-each-pair(item()*, item()*, function(item(), item()) as item()*) as item()*
         Applies the function item $action to successive pairs of items taken one from
               $input1 and one from $input2, returning the concatenation of the
            resulting sequences in order.
      format-dateformat-date(xs:date?, xs:string) as xs:string?format-date(xs:date?, xs:string, xs:string?, xs:string?, xs:string?) as xs:string?
         Returns a string containing an xs:date value formatted for display.
      format-dateTimeformat-dateTime(xs:dateTime?, xs:string) as xs:string?format-dateTime(xs:dateTime?, xs:string, xs:string?, xs:string?, xs:string?) as xs:string?
         Returns a string containing an xs:dateTime value formatted for display.
      format-integerformat-integer(xs:integer?, xs:string) as xs:stringformat-integer(xs:integer?, xs:string, xs:string?) as xs:string
         Formats an integer according to a given picture string, using the conventions of a given
            natural language if specified.
      format-numberformat-number(xs:numeric?, xs:string) as xs:stringformat-number(xs:numeric?, xs:string, union(xs:string, xs:QName)?) as xs:string
         Returns a string containing a number formatted according to a given picture string,
            taking account of decimal formats specified in the static context.
      format-timeformat-time(xs:time?, xs:string) as xs:string?format-time(xs:time?, xs:string, xs:string?, xs:string?, xs:string?) as xs:string?
         Returns a string containing an xs:time value formatted for display.
      function-arityfunction-arity(function(*)) as xs:integer
         Returns the arity of the function identified by a function item.
      function-lookupfunction-lookup(xs:QName, xs:integer) as function(*)?
         Returns the function having a given name and arity, if there is one.
      function-namefunction-name(function(*)) as xs:QName?
         Returns the name of the function identified by a function item.
      generate-idgenerate-id() as xs:stringgenerate-id(node()?) as xs:string
         This function returns a string that uniquely identifies a given node. 
      has-childrenhas-children() as xs:booleanhas-children(node()?) as xs:boolean
         Returns true if the supplied node has one or more child nodes (of any kind).
      headhead(item()*) as item()?
         Returns the first item in a sequence. 
      highesthighest(item()*) as item()*highest(item()*, xs:string?) as item()*highest(item()*, xs:string?, function(item()) as xs:anyAtomicType*) as item()*
         Returns those items from a supplied sequence that have the highest value of a sort key, where
            the sort key can be computed using a caller-supplied function.
      hours-from-dateTimehours-from-dateTime(xs:dateTime?) as xs:integer?
         Returns the hours component of an xs:dateTime.
      hours-from-durationhours-from-duration(xs:duration?) as xs:integer?
         Returns the number of hours in a duration.
      hours-from-timehours-from-time(xs:time?) as xs:integer?
         Returns the hours component of an xs:time.
      idid(xs:string*) as element()*id(xs:string*, node()) as element()*
         Returns the sequence of element nodes that have an ID value matching the
            value of one or more of the IDREF values supplied in $values.
      identityidentity(item()*) as item()*
         Returns its argument value.
      idrefidref(xs:string*) as node()*idref(xs:string*, node()) as node()*
         Returns the sequence of element or attribute nodes with an IDREF value
            matching the value of one or more of the ID values supplied in
               $values.
      implicit-timezoneimplicit-timezone() as xs:dayTimeDuration
         Returns the value of the implicit timezone property from the dynamic context. 
      index-ofindex-of(xs:anyAtomicType*, xs:anyAtomicType) as xs:integer*index-of(xs:anyAtomicType*, xs:anyAtomicType, xs:string) as xs:integer*
         Returns a sequence of positive integers giving the positions within the sequence
               $input of items that are equal to $search.
      index-whereindex-where(item()*, function(item()) as xs:boolean) as xs:integer*
         Returns the position in an input sequence of items that match a supplied predicate.
      innermostinnermost(node()*) as node()*
         Returns every node within the input sequence that is not an ancestor of another member
            of the input sequence; the nodes are returned in document order with duplicates
            eliminated.
      in-scope-namespacesin-scope-namespaces(element()) as map(union(xs:NCName, enum('')), xs:anyURI)
         Returns the in-scope namespaces of an element node, as a map.
      in-scope-prefixesin-scope-prefixes(element()) as xs:string*
         Returns the prefixes of the in-scope namespaces for an element node.
      insert-beforeinsert-before(item()*, xs:integer, item()*) as item()*
         Returns a sequence constructed by inserting an item or a sequence of items at a given
            position within an existing sequence.
      iri-to-uriiri-to-uri(xs:string?) as xs:string
         Converts a string containing an IRI into a URI according to the rules of [rfc3987].
      is-NaNis-NaN(xs:anyAtomicType) as xs:boolean
         Returns true if the argument is the xs:float or xs:double value NaN.
      items-afteritems-after(item()*, function(item()) as xs:boolean) as item()?
         Returns the items from the input sequence that follow the first item to match a supplied predicate.
      items-beforeitems-before(item()*, function(item()) as xs:boolean) as item()?
         Returns the items from the input sequence that precede the first item to match a supplied predicate.
      items-fromitems-after(item()*, function(item()) as xs:boolean) as item()?
         Returns the items from the input sequence starting from the first item to match a supplied predicate.
      items-untilitems-until(item()*, function(item()) as xs:boolean) as item()?
         Returns the items from the input sequence ending with the first item to match a supplied predicate.
      jsonjson(item()*) as xs:stringjson(xs:string?, map(*)) as xs:string
         Creates a JSON representation of an arbitrary XDM value.
      json-docjson-doc(xs:string?) as item()?json-doc(xs:string?, map(*)) as item()?
         Reads an external resource containing JSON, and returns the result of parsing the resource as JSON.
      json-to-xmljson-to-xml(xs:string?) as document-node()?json-to-xml(xs:string?, map(*)) as document-node()?
         Parses a string supplied in the form of a JSON text, returning the results in the form
            of an XML document node.
      langlang(xs:string?) as xs:booleanlang(xs:string?, node()) as xs:boolean
         This function tests whether the language of $node, or the context item if
            the second argument is omitted, as specified by xml:lang attributes is the
            same as, or is a sublanguage of, the language specified by $language.
      lastlast() as xs:integer
         Returns the context size from the dynamic context.
      load-xquery-moduleload-xquery-module(xs:string) as map(*)load-xquery-module(xs:string, map(*)) as map(*)
         Provides access to the public functions and global variables of a dynamically-loaded XQuery library module.
      local-namelocal-name() as xs:stringlocal-name(node()?) as xs:string
         Returns the local part of the name of $node as an xs:string
            that is either the zero-length string, or has the lexical form of an
               xs:NCName.
      local-name-from-QNamelocal-name-from-QName(xs:QName?) as xs:NCName?
         Returns the local part of the supplied QName.
      lower-caselower-case(xs:string?) as xs:string
         Converts a string to lower case.
      lowestlowest(item()*) as item()*lowest(item()*, xs:string?) as item()*lowest(item()*, xs:string?, function(item()) as xs:anyAtomicType*) as item()*
         Returns those items from a supplied sequence that have the lowest value of a sort key, where
            the sort key can be computed using a caller-supplied function.
      matchesmatches(xs:string?, xs:string) as xs:booleanmatches(xs:string?, xs:string, xs:string) as xs:boolean
         Returns true if the supplied string matches a given regular expression.
      maxmax(xs:anyAtomicType*) as xs:anyAtomicType?max(xs:anyAtomicType*, xs:string) as xs:anyAtomicType?
         Returns a value that is equal to the highest value appearing in the input sequence.
      minmin(xs:anyAtomicType*) as xs:anyAtomicType?min(xs:anyAtomicType*, xs:string) as xs:anyAtomicType?
         Returns a value that is equal to the lowest value appearing in the input sequence.
      minutes-from-dateTimeminutes-from-dateTime(xs:dateTime?) as xs:integer?
         Returns the minute component of an xs:dateTime.
      minutes-from-durationminutes-from-duration(xs:duration?) as xs:integer?
         Returns the number of minutes in a duration.
      minutes-from-timeminutes-from-time(xs:time?) as xs:integer?
         Returns the minutes component of an xs:time.
      month-from-datemonth-from-date(xs:date?) as xs:integer?
         Returns the month component of an xs:date.
      month-from-dateTimemonth-from-dateTime(xs:dateTime?) as xs:integer?
         Returns the month component of an xs:dateTime.
      months-from-durationmonths-from-duration(xs:duration?) as xs:integer?
         Returns the number of months in a duration.
      namename() as xs:stringname(node()?) as xs:string
         Returns the name of a node, as an xs:string that is either the zero-length
            string, or has the lexical form of an xs:QName. 
      namespace-urinamespace-uri() as xs:anyURInamespace-uri(node()?) as xs:anyURI
         Returns the namespace URI part of the name of $node, as an
               xs:anyURI value.
      namespace-uri-for-prefixnamespace-uri-for-prefix(union(xs:NCName, enum(''))?, element()) as xs:anyURI?
         Returns the namespace URI of one of the in-scope namespaces for $element,
            identified by its namespace prefix.
      namespace-uri-from-QNamenamespace-uri-from-QName(xs:QName?) as xs:anyURI?
         Returns the namespace URI part of the supplied QName.
      nillednilled() as xs:boolean?nilled(node()?) as xs:boolean?
         Returns true for an element that is nilled.
      node-namenode-name() as xs:QName?node-name(node()?) as xs:QName?
         Returns the name of a node, as an xs:QName.
      normalize-spacenormalize-space() as xs:stringnormalize-space(xs:string?) as xs:string
         Returns $value with leading and trailing whitespace removed, and
            sequences of internal whitespace reduced to a single space character.
      normalize-unicodenormalize-unicode(xs:string?) as xs:stringnormalize-unicode(xs:string?, xs:string) as xs:string
         Returns $value after applying Unicode normalization.
      notnot(item()*) as xs:boolean
         Returns true if the effective boolean value of $input is
               false, or false if it is true.
      numbernumber() as xs:doublenumber(xs:anyAtomicType?) as xs:double
         Returns the value indicated by $value or, if $value is not
            specified, the context item after atomization, converted to an xs:double.
         
      one-or-moreone-or-more(item()*) as item()+
         Returns $input if it contains one or more items. Otherwise, raises an error.
         
      outermostoutermost(node()*) as node()*
         Returns every node within the input sequence that has no ancestor that is itself a
            member of the input sequence; the nodes are returned in document order with duplicates
            eliminated.
      parse-ietf-dateparse-ietf-date(xs:string?) as xs:dateTime?
         Parses a string containing the date and time in IETF format, returning the corresponding
               xs:dateTime value.
      parse-jsonparse-json(xs:string?) as item()?parse-json(xs:string?, map(*)) as item()?
         Parses a string supplied in the form of a JSON text, returning the results typically in the form
            of a map or array.
      parse-xmlparse-xml(xs:string?) as document-node(element(*))?
         This function takes as input an XML document represented as a string, and returns the
            document node at the root of an XDM tree representing the parsed document.
      parse-xml-fragmentparse-xml-fragment(xs:string?) as document-node()?
         This function takes as input an XML external entity represented as a string, and returns
            the document node at the root of an XDM tree representing the parsed document
            fragment.
      pathpath() as xs:string?path(node()?) as xs:string?
         Returns a path expression that can be used to select the supplied node relative to the
            root of its containing document.
      positionposition() as xs:integer
         Returns the context position from the dynamic context.
      prefix-from-QNameprefix-from-QName(xs:QName?) as xs:NCName?
         Returns the prefix component of the supplied QName.
      QNameQName(xs:string?, xs:string) as xs:QName
         Returns an xs:QName value formed using a supplied namespace URI and lexical QName.
      random-number-generatorrandom-number-generator() as item-type(rng)random-number-generator(xs:anyAtomicType?) as item-type(rng)
         Returns a random number generator, which can be used to generate sequences of random numbers.
      rangerange(item()*, (function(item()) as xs:boolean)?) as item()*range(item()*, (function(item()) as xs:boolean)?, (function(item()) as xs:boolean)?) as item()*range(item()*, (function(item()) as xs:boolean)?, (function(item()) as xs:boolean)?, record) as item()*
         Returns a sequence containing selected members from a supplied input.
      removeremove(item()*, xs:integer) as item()*
         Returns a new sequence containing all the items of $input except the item
            at position $position.
      replacereplace(xs:string?, xs:string, xs:string) as xs:stringreplace(xs:string?, xs:string, xs:string, xs:string) as xs:string
         Returns a string produced from the input string by replacing any substrings that match a
            given regular expression with a supplied replacement string.
      replace-withreplace-with(xs:string?, xs:string, function(xs:string) as xs:string?) as xs:stringreplace-with(xs:string?, xs:string, function(xs:string) as xs:string?, xs:string) as xs:string
         Replaces the parts of a string that match a regular expression with replacement
            strings obtained by calling a user-supplied function.
      replicatereplicate(item()*, xs:nonNegativeInteger) as item()*
         Produces multiple copies of a sequence.
      resolve-QNameresolve-QName(xs:string?, element()) as xs:QName?
         Returns an xs:QName value (that is, an expanded-QName) by taking an
               xs:string that has the lexical form of an xs:QName (a
            string in the form "prefix:local-name" or "local-name") and resolving it using the
            in-scope namespaces for a given element.
      resolve-uriresolve-uri(xs:string?) as xs:anyURI?resolve-uri(xs:string?, xs:string) as xs:anyURI?
         Resolves a relative IRI reference against an absolute IRI.
      reversereverse(item()*) as item()*
         Reverses the order of items in a sequence. 
      rootroot() as node()root(node()?) as node()?
         Returns the root of the tree to which $node belongs. This will usually, but
            not necessarily, be a document node.
      roundround(xs:numeric?) as xs:numeric?round(xs:numeric?, xs:integer) as xs:numeric?
         Rounds a value to a specified number of decimal places, rounding upwards if two such
            values are equally near.
      round-half-to-evenround-half-to-even(xs:numeric?) as xs:numeric?round-half-to-even(xs:numeric?, xs:integer) as xs:numeric?
         Rounds a value to a specified number of decimal places, rounding to make the last digit
            even if two such values are equally near.
      seconds-from-dateTimeseconds-from-dateTime(xs:dateTime?) as xs:decimal?
         Returns the seconds component of an xs:dateTime.
      seconds-from-durationseconds-from-duration(xs:duration?) as xs:decimal?
         Returns the number of seconds in a duration.
      seconds-from-timeseconds-from-time(xs:time?) as xs:decimal?
         Returns the seconds component of an xs:time.
      serializeserialize(item()*) as xs:stringserialize(item()*, item()?) as xs:string
         This function serializes the supplied input sequence $input as described in
               [xslt-xquery-serialization-31], returning the serialized representation
            of the sequence as a string.
      sliceslice(item()*, xs:integer*) as item()*
         Returns a sequence containing the members from a supplied input sequence at given positions,
            counting from either end of the sequence.
      slice-20201203slice-20201203(item()*, record) as item()*
         Returns a sequence containing selected members from a supplied input.
      somesome(item()*, function(item()) as xs:boolean) as xs:integer*
         Returns true if at least one item in the input sequence matches a supplied predicate.
      sortsort(item()*) as item()*sort(item()*, xs:string?) as item()*sort(item()*, xs:string?, function(item()) as xs:anyAtomicType*) as item()*
         Sorts a supplied sequence, based on the value of a sort key supplied as a function.
      spreadspread(item(*), xs:numeric) as array(item())*spread(item(*), xs:numeric, function(item()) as union(xs:numeric, xs:boolean)) as array(item())*
         Converts a supplied sequence into a sequence of arrays, based on a user-supplied function
         that determines the maximum "weight" of each of these arrays.
      stack-tracestack-trace() as xs:string
         Returns implementation-dependent information about the current state of execution.
      starts-withstarts-with(xs:string?, xs:string?) as xs:booleanstarts-with(xs:string?, xs:string?, xs:string) as xs:boolean
         Returns true if the string $value contains $substring as a leading
            substring, taking collations into account.
      static-base-uristatic-base-uri() as xs:anyURI?
         This function returns the value of the static base URI property from the static
            context.
      stringstring() as xs:stringstring(item()?) as xs:string
         Returns the value of $item represented as an xs:string.
      string-joinstring-join(xs:anyAtomicType*) as xs:stringstring-join(xs:anyAtomicType*, xs:string) as xs:string
         Returns a string created by concatenating the items in a sequence, with a defined
            separator between adjacent items.
      string-lengthstring-length() as xs:integerstring-length(xs:string?) as xs:integer
         Returns the number of characters in a string.
      string-to-codepointsstring-to-codepoints(xs:string?) as xs:integer*
         Returns the sequence of codepoints that constitute an
               xs:string value. 
      subsequencesubsequence(item()*, xs:double) as item()*subsequence(item()*, xs:double, xs:double) as item()*
         Returns the contiguous sequence of items in $input
            beginning at the position indicated by $start and
            continuing for the number of items indicated by $length. 
      substringsubstring(xs:string?, xs:double) as xs:stringsubstring(xs:string?, xs:double, xs:double) as xs:string
         Returns the part of $value beginning at the position
            indicated by $start and continuing for the number of characters indicated by $length.
      substring-aftersubstring-after(xs:string?, xs:string?) as xs:stringsubstring-after(xs:string?, xs:string?, xs:string) as xs:string
         Returns the part of $value that follows the first occurrence of
               $substring, taking collations into account.
      substring-beforesubstring-before(xs:string?, xs:string?) as xs:stringsubstring-before(xs:string?, xs:string?, xs:string) as xs:string
         Returns the part of $value that precedes the first occurrence of
               $substring, taking collations into account.
      sumsum(xs:anyAtomicType*) as xs:anyAtomicTypesum(xs:anyAtomicType*, xs:anyAtomicType?) as xs:anyAtomicType?
         Returns a value obtained by adding together the values in $values.
      tailtail(item()*) as item()*
         Returns all but the first item in a sequence. 
      timezone-from-datetimezone-from-date(xs:date?) as xs:dayTimeDuration?
         Returns the timezone component of an xs:date.
      timezone-from-dateTimetimezone-from-dateTime(xs:dateTime?) as xs:dayTimeDuration?
         Returns the timezone component of an xs:dateTime.
      timezone-from-timetimezone-from-time(xs:time?) as xs:dayTimeDuration?
         Returns the timezone component of an xs:time.
      tokenizetokenize(xs:string?) as xs:string*tokenize(xs:string?, xs:string) as xs:string*tokenize(xs:string?, xs:string, xs:string) as xs:string*
         Returns a sequence of strings constructed by splitting the input wherever a separator is
            found; the separator is any substring that matches a given regular expression.
      tracetrace(item()*) as item()*trace(item()*, xs:string) as item()*
         Provides an execution trace intended to be used in debugging queries.
      transformtransform(map(*)) as map(*)
         Invokes a transformation using a dynamically-loaded XSLT stylesheet.
      translatetranslate(xs:string?, xs:string, xs:string) as xs:string
         Returns $value modified by replacing or removing individual
            characters. 
      truetrue() as xs:boolean
         Returns the xs:boolean value true.
      uniformuniform(xs:anyAtomicType*) as xs:booleanuniform(xs:anyAtomicType*, xs:string) as xs:boolean
         Returns true if all items in a supplied sequence (after atomization) are equal.
      uniqueunique(xs:anyAtomicType**) as xs:booleanunique(xs:anyAtomicType**, xs:string) as xs:boolean
         Returns true if all items in a supplied sequence are distinct.
      unorderedunordered(item()*) as item()*
         Returns the items of $input in an implementation-dependent order.
      unparsed-textunparsed-text(xs:string?) as xs:string?unparsed-text(xs:string?, xs:string) as xs:string?
         The fn:unparsed-text function reads an external resource (for example, a
            file) and returns a string representation of the resource.
      unparsed-text-availableunparsed-text-available(xs:string?) as xs:booleanunparsed-text-available(xs:string?, xs:string) as xs:boolean
         Because errors in evaluating the fn:unparsed-text function are
            non-recoverable, these two functions are provided to allow an application to determine
            whether a call with particular arguments would succeed.
      unparsed-text-linesunparsed-text-lines(xs:string?) as xs:string*unparsed-text-lines(xs:string?, xs:string) as xs:string*
         The fn:unparsed-text-lines function reads an external resource (for
            example, a file) and returns its contents as a sequence of strings, one for each line of
            text in the string representation of the resource.
      upper-caseupper-case(xs:string?) as xs:string
         Converts a string to upper case.
      uri-collectionuri-collection() as xs:anyURI*uri-collection(xs:string?) as xs:anyURI*
         Returns a sequence of xs:anyURI values representing the URIs in a URI
            collection.
      xml-to-jsonxml-to-json(node()?) as xs:string?xml-to-json(node()?, map(*)) as xs:string?
         Converts an XML tree, whose format corresponds to the XML representation of JSON defined
            in this specification, into a string conforming to the JSON grammar.
      year-from-dateyear-from-date(xs:date?) as xs:integer?
         Returns the year component of an xs:date.
      year-from-dateTimeyear-from-dateTime(xs:dateTime?) as xs:integer?
         Returns the year component of an xs:dateTime.
      years-from-durationyears-from-duration(xs:duration?) as xs:integer?
         Returns the number of years in a duration.
      zero-or-onezero-or-one(item()*) as item()?
         Returns input if it contains zero or one items. Otherwise, raises an
            error.
      accumulator-afteraccumulator-after(union(xs:QName, xs:string)) as item()*
         Returns the post-descent value of the selected accumulator at the context node.
      accumulator-beforeaccumulator-before(union(xs:QName, xs:string)) as item()*
         Returns the pre-descent value of the selected accumulator at the context node.
      available-system-propertiesavailable-system-properties() as xs:QName*
         Returns a list of system property names that are suitable for passing to
            the system-property function, as a sequence of QNames.
      copy-ofcopy-of() as item()copy-of(item()*) as item()*
         Returns a deep copy of the sequence supplied as the $input argument, or of the
            context item if the argument is absent.
      currentcurrent() as item()
         Returns the item that is the context item for the evaluation of the containing XPath
            expression
      current-groupcurrent-group() as item()*
         Returns the group currently being processed by an xsl:for-each-group
             instruction.
      current-grouping-keycurrent-grouping-key() as xs:anyAtomicType*
         Returns the grouping key of the group currently being processed using the
               xsl:for-each-group
             instruction.
      current-merge-groupcurrent-merge-group() as item()*current-merge-group(xs:string) as item()*
         Returns the group of items currently being processed by an xsl:merge
            instruction.
      current-merge-keycurrent-merge-key() as xs:anyAtomicType*
         Returns the merge key of the 
            merge group currently being processed using the
               xsl:merge instruction.
      current-modecurrent-mode() as xs:QName?
         Returns the value of the .
      current-output-uricurrent-output-uri() as xs:anyURI?
         Returns the value of the .
      documentdocument(item()*) as node()*document(item()*, node()) as node()*
         Provides access to XML documents identified by a URI.
      element-availableelement-available(union(xs:QName, xs:string)) as xs:boolean
         Determines whether a particular instruction is or is not available for use. The function
            is particularly useful for calling within an [xsl:]use-when attribute (see
               ) to test whether a particular
             is available.
      function-availablefunction-available(union(xs:QName, xs:string)) as xs:booleanfunction-available(union(xs:QName, xs:string), xs:integer) as xs:boolean
         Determines whether a particular function is or is not available for use. The function is
            particularly useful for calling within an [xsl:]use-when attribute (see
               ) to test whether a particular  is available.
      keykey(union(xs:string, xs:QName), xs:anyAtomicType*) as node()*key(union(xs:string, xs:QName), xs:anyAtomicType*, node()) as node()*
         Returns the nodes that match a supplied key value.
      regex-groupregex-group(xs:integer) as xs:string
         Returns the string captured by a parenthesized subexpression of the regular expression
            used during evaluation of the xsl:analyze-string instruction.
      snapshotsnapshot() as item()snapshot(item()*) as item()*
         Returns a copy of a sequence, retaining copies of the ancestors and descendants of any node in the input sequence, together with their
            attributes and namespaces.
      stream-availablestream-available(xs:string?) as xs:boolean
         Determines, as far as possible, whether a document is available for streamed processing using xsl:source-document.
      system-propertysystem-property(union(xs:QName, xs:string)) as xs:string
         Returns the value of a system property
      type-availabletype-available(union(xs:QName, xs:string)) as xs:boolean
         
         Used to control how a stylesheet behaves if a particular schema type is or is not
            available in the static context.
         
      unparsed-entity-public-idunparsed-entity-public-id(xs:string) as xs:stringunparsed-entity-public-id(xs:string, node()) as xs:string
         Returns the public identifier of an unparsed entity
      unparsed-entity-uriunparsed-entity-uri(xs:string) as xs:anyURIunparsed-entity-uri(xs:string, node()) as xs:anyURI
         Returns the URI (system identifier) of an unparsed entity
      putput(node(), xs:string) as empty-sequence()Stores a document or element to the location specified by $uri. This function is normally invoked to create a resource 
          on an external storage system such as a file system or a database.The external effects of fn:put are implementation-defined, since they occur outside the domain of XQuery. 
            The intent is that, if fn:put is invoked on a document node and no error is raised, a subsequent query can access 
            the stored document by invoking fn:doc with the same URI.XQuery and XPath Functions and Operators 3.1
        (21 March 2017 version)
      XSL Transformations (XSLT) Version 3.0
        (7 February 2017 version)
      XQuery Update Facility 1.0
        (25 January 2011 version)
      
Resource Directory Description Language (RDDL) (4 July 2007)

Gleaning Resource Descriptions from Dialects of Languages (GRDDL)
(Recommendation of 11 September 2007)

Resource Description Framework (RDF):
Concepts and Abstract Syntax (Recommendation of 10 February 2004)
</rdf:Description>
</rdf:RDF>
